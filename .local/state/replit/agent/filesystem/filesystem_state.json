{"file_contents":{"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"replit.md":{"content":"# WhatsApp Business Cloud API Management System\n\n## Overview\n\nA comprehensive SaaS-like WhatsApp Business Cloud API management system similar to botsailor or business on bot. The system works independently with direct WhatsApp API integration using access tokens, phone number IDs, and database configuration through GUI, while offering optional n8n integration for advanced marketing automation with message synchronization and template management from Facebook Business Manager.\n\n## Recent Major Features (January 2025)\n\n- **✅ Complete WhatsApp Business API Integration**: Direct messaging, webhook handling, real-time status updates\n- **✅ Facebook Business Manager Template Sync**: One-click synchronization of approved message templates\n- **✅ Real-time Bidirectional Messaging**: Live chat with WebSocket support and message status tracking\n- **✅ Template Message System**: Proper WhatsApp template format support with dedicated API endpoints\n- **✅ Enhanced UI/UX**: Clean chat interface with gradient avatars, phone number display, and status indicators\n- **✅ Configuration Management**: Complete GUI-based setup for WhatsApp credentials and n8n integration\n- **✅ Contact & Conversation Management**: Full CRUD operations with real-time updates\n- **✅ Webhook Processing**: Comprehensive webhook handling for messages and status updates\n- **✅ Media Upload/Download Support**: Images, videos, and documents via chat with WhatsApp API integration\n- **✅ Template Variable Dialog**: Prompts for template variables before sending template messages\n- **✅ Persistent Database Storage**: PostgreSQL database for data persistence across restarts\n- **✅ Enhanced Read Receipts**: Blue tick indicators for read messages with proper status tracking\n- **✅ Unread Message Indicators**: Visual count badges in conversation list for new messages\n- **✅ Media Server Integration**: CDN configuration tab with support for Bunny CDN, AWS S3, Cloudinary, and custom CDN providers\n- **✅ Database Schema Updates**: Extended configuration storage for CDN settings and media handling\n\n## User Preferences\n\nPreferred communication style: Simple, everyday language.\nTechnical level: Non-technical user requiring clear guidance and practical solutions.\n\n## System Architecture\n\n### Core Features\n\n1. **WhatsApp Business Cloud API Integration**\n   - Direct messaging via Facebook Graph API v18.0\n   - Real-time webhook processing for incoming messages and status updates\n   - Template message support with Facebook Business Manager sync\n   - Phone number and Business Account ID auto-detection from webhook logs\n   - Comprehensive error handling and logging\n\n2. **Template Management System**\n   - Facebook Business Manager integration for template synchronization\n   - Support for approved templates with proper WhatsApp formatting\n   - Template variable handling and content management\n   - Dedicated API endpoints for template operations\n   - Prevention of duplicate template imports\n\n3. **Real-time Communication**\n   - WebSocket-based live chat interface\n   - Bidirectional message synchronization\n   - Message status tracking (sent → delivered → read)\n   - Real-time conversation updates and notifications\n   - Auto-reconnection with exponential backoff\n\n4. **Contact & Conversation Management**\n   - Automatic contact creation from incoming messages\n   - Conversation threading and message history\n   - Contact grouping and categorization\n   - Phone number validation and formatting\n   - Contact profile management with avatars\n\n### Frontend Architecture\nThe frontend is built using React with TypeScript and follows a component-based architecture:\n\n- **UI Framework**: shadcn/ui components built on Radix UI primitives for consistent, accessible design\n- **State Management**: TanStack Query for server state management and caching\n- **Styling**: Tailwind CSS with WhatsApp-specific color schemes and gradients\n- **Routing**: Wouter for lightweight client-side routing\n- **Real-time Communication**: WebSocket integration with automatic reconnection\n- **Form Management**: React Hook Form with Zod validation for all configuration forms\n\n### Backend Architecture\nThe backend follows a REST API pattern with comprehensive WhatsApp integration:\n\n- **Framework**: Express.js with TypeScript for type safety\n- **WhatsApp Integration**: Direct Facebook Graph API integration with proper webhook handling\n- **Session Management**: Express sessions with secure cookie configuration\n- **API Design**: RESTful endpoints organized by feature with dedicated template messaging endpoints\n- **Real-time Features**: WebSocket server for live chat updates and message status broadcasting\n- **Webhook Processing**: Comprehensive webhook parsing for messages, statuses, and contact information\n- **Error Handling**: Detailed logging and error responses with user-friendly messages\n\n### Database Architecture\nNow uses PostgreSQL database for persistent storage:\n\n- **Storage System**: Database-backed storage using PostgreSQL with Neon serverless\n- **Schema Design**: Comprehensive data models for users, contacts, conversations, messages, templates, broadcasts, and app configuration\n- **Configuration Management**: Per-user configuration storage for WhatsApp credentials and system settings\n- **Webhook Logging**: Complete audit trail of all webhook events and API interactions\n- **Message Management**: Full message history with status tracking and metadata storage\n- **Template Storage**: Support for Facebook Business Manager template synchronization with metadata\n\n### Authentication System\nSimple session-based authentication optimized for single-user or small team deployments:\n\n- **Storage**: Express sessions with configurable storage backend\n- **Security**: HTTP-only cookies with secure flags in production\n- **Password Hashing**: bcrypt for secure password storage\n- **Authorization**: Middleware-based route protection for all API endpoints\n- **User Management**: Simple username/password authentication with session persistence\n\n### Real-time Communication\nWebSocket implementation for live updates:\n\n- **Connection Management**: Map-based WebSocket connection tracking per user\n- **Message Types**: Structured message types for different real-time events (new messages, status updates)\n- **Auto-reconnection**: Client-side reconnection logic with exponential backoff\n- **Query Invalidation**: Automatic cache updates when receiving real-time events\n\n### Component Architecture\nModular component structure optimized for WhatsApp Business workflows:\n\n- **Chat Interface**: Complete messaging interface with template selection and file upload support\n- **Template Manager**: Facebook Business Manager sync with template creation and editing\n- **Contact Management**: Automatic contact creation with manual management capabilities  \n- **Settings Configuration**: Comprehensive GUI for WhatsApp API and n8n configuration\n- **Message Components**: Status-aware message bubbles with gradient avatars and timestamps\n- **UI Components**: Consistent shadcn/ui components with WhatsApp green theming\n\n### Build and Development\nModern build tooling and development experience:\n\n- **Build Tool**: Vite for fast development and optimized production builds\n- **Development**: Hot module replacement and error overlays\n- **Production**: Separate client and server builds with static asset serving\n- **Type Checking**: Full TypeScript coverage across frontend, backend, and shared schemas\n\n## Deployment Instructions\n\n### Prerequisites\n\n1. **WhatsApp Business Account Setup**:\n   - Facebook Business Account with verified phone number\n   - WhatsApp Business Account connected to Facebook Business\n   - Facebook App with WhatsApp Business product enabled\n   - Access Token with `whatsapp_business_messaging` permissions\n   - Phone Number ID from WhatsApp Business Account\n\n2. **System Requirements**:\n   - Node.js 18+ \n   - Modern web browser (Chrome, Firefox, Safari, Edge)\n   - HTTPS domain for webhook configuration (required by WhatsApp)\n\n### Online Deployment (Recommended)\n\n#### Option 1: Replit Deployment (Easiest)\n1. **Fork the Project**: Click \"Fork\" button in Replit\n2. **Configure Environment**: Set up the following secrets in Replit:\n   ```\n   SESSION_SECRET=your-secure-session-secret-here\n   DATABASE_URL=postgresql://... (if using persistent storage)\n   ```\n3. **Run the Application**: Click \"Run\" button\n4. **Access the Application**: Use the provided Replit URL\n5. **Configure WhatsApp**: \n   - Go to Settings → WhatsApp Business\n   - Add your Access Token and Phone Number ID\n   - Use the Replit URL for webhook configuration in Facebook Developer Console\n\n#### Option 2: Vercel/Netlify/Heroku\n1. **Repository Setup**: Push code to GitHub repository\n2. **Deploy**: Connect repository to your preferred platform\n3. **Environment Variables**: Configure required secrets\n4. **Domain Setup**: Ensure HTTPS domain for webhook configuration\n5. **WhatsApp Configuration**: Update webhook URLs in Facebook Developer Console\n\n#### Option 3: Docker Deployment\n```bash\n# Clone repository\ngit clone <repository-url>\ncd whatsapp-business-portal\n\n# Build Docker image\ndocker build -t whatsapp-business-portal .\n\n# Run container\ndocker run -p 5000:5000 \\\n  -e SESSION_SECRET=\"your-secret\" \\\n  -e DATABASE_URL=\"postgresql://...\" \\\n  whatsapp-business-portal\n```\n\n### Offline/Local Development\n\n#### Quick Start\n```bash\n# Install dependencies\nnpm install\n\n# Start development server\nnpm run dev\n\n# Application runs on http://localhost:5000\n```\n\n#### Local Configuration\n1. **Create `.env` file**:\n   ```env\n   SESSION_SECRET=development-secret-key\n   NODE_ENV=development\n   # Optional: DATABASE_URL for persistent storage\n   ```\n\n2. **WhatsApp Setup for Local Development**:\n   - Use ngrok for HTTPS tunnel: `ngrok http 5000`\n   - Use ngrok URL for webhook configuration\n   - Note: WhatsApp requires HTTPS webhooks\n\n### Production Configuration\n\n#### WhatsApp Business API Setup\n1. **Facebook Developer Console**:\n   - Create Facebook App with WhatsApp Business product\n   - Generate Access Token with proper permissions\n   - Configure webhook URL: `https://yourdomain.com/api/webhooks/whatsapp`\n   - Set webhook verify token (matches your configuration)\n   - Subscribe to `messages` webhook field\n\n2. **Application Configuration**:\n   - Access Token: From Facebook App dashboard\n   - Phone Number ID: From WhatsApp Business Account (e.g., `776001938919357`)\n   - Business Account ID: From webhook logs (e.g., `732324892861637`)\n   - Webhook Verify Token: Custom secure string\n\n#### Security Considerations\n- Use strong SESSION_SECRET in production\n- Enable HTTPS for all production deployments\n- Configure proper CORS policies\n- Set secure cookie flags in production environment\n- Regularly rotate access tokens and webhook secrets\n\n### Feature Configuration\n\n#### Template Sync Setup\n1. **Business Account ID**: Required for Facebook Business Manager integration\n2. **Template Sync**: Go to Templates → \"Sync from Facebook\" button\n3. **Template Usage**: Available immediately in chat interface\n\n#### n8n Integration (Optional)\n1. **Enable n8n**: Toggle in Settings → n8n Integration\n2. **Webhook URL**: Your n8n instance webhook endpoint\n3. **API Key**: Optional for advanced n8n operations\n4. **Workflow Setup**: Configure n8n workflows to receive WhatsApp data\n\n### Troubleshooting\n\n#### Common Issues\n1. **Template Not Found Error**: \n   - Verify Business Account ID is correct\n   - Ensure templates are approved in Facebook Business Manager\n   - Check template name formatting (lowercase, underscores only)\n\n2. **Webhook Not Working**:\n   - Verify HTTPS URL is accessible\n   - Check webhook verify token matches configuration\n   - Ensure proper Facebook App permissions\n\n3. **Messages Not Sending**:\n   - Verify Access Token has proper permissions\n   - Check Phone Number ID is correct\n   - Ensure recipient number format (+country_code)\n\n## External Dependencies\n\n### Core Technologies\n- **React + TypeScript**: Modern frontend with type safety\n- **Express.js**: Backend API server with middleware support\n- **shadcn/ui + Tailwind CSS**: Modern UI components and styling\n- **TanStack Query**: Server state management and caching\n- **WebSocket (ws)**: Real-time communication\n- **Vite**: Fast development and production builds\n\n### WhatsApp Integration\n- **Facebook Graph API**: WhatsApp Business Cloud API integration\n- **Webhook Processing**: Real-time message and status updates\n- **Template Management**: Facebook Business Manager synchronization\n\n### Development Tools\n- **TypeScript**: Full type coverage across application\n- **Zod**: Runtime validation and schema parsing\n- **React Hook Form**: Form management with validation\n- **Lucide React**: Consistent iconography","size_bytes":12788},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"var(--background)\",\n        foreground: \"var(--foreground)\",\n        card: {\n          DEFAULT: \"var(--card)\",\n          foreground: \"var(--card-foreground)\",\n        },\n        popover: {\n          DEFAULT: \"var(--popover)\",\n          foreground: \"var(--popover-foreground)\",\n        },\n        primary: {\n          DEFAULT: \"var(--primary)\",\n          foreground: \"var(--primary-foreground)\",\n        },\n        secondary: {\n          DEFAULT: \"var(--secondary)\",\n          foreground: \"var(--secondary-foreground)\",\n        },\n        muted: {\n          DEFAULT: \"var(--muted)\",\n          foreground: \"var(--muted-foreground)\",\n        },\n        accent: {\n          DEFAULT: \"var(--accent)\",\n          foreground: \"var(--accent-foreground)\",\n        },\n        destructive: {\n          DEFAULT: \"var(--destructive)\",\n          foreground: \"var(--destructive-foreground)\",\n        },\n        border: \"var(--border)\",\n        input: \"var(--input)\",\n        ring: \"var(--ring)\",\n        chart: {\n          \"1\": \"var(--chart-1)\",\n          \"2\": \"var(--chart-2)\",\n          \"3\": \"var(--chart-3)\",\n          \"4\": \"var(--chart-4)\",\n          \"5\": \"var(--chart-5)\",\n        },\n        sidebar: {\n          DEFAULT: \"var(--sidebar-background)\",\n          foreground: \"var(--sidebar-foreground)\",\n          primary: \"var(--sidebar-primary)\",\n          \"primary-foreground\": \"var(--sidebar-primary-foreground)\",\n          accent: \"var(--sidebar-accent)\",\n          \"accent-foreground\": \"var(--sidebar-accent-foreground)\",\n          border: \"var(--sidebar-border)\",\n          ring: \"var(--sidebar-ring)\",\n        },\n        whatsapp: {\n          DEFAULT: \"var(--whatsapp)\",\n          dark: \"var(--whatsapp-dark)\",\n          light: \"var(--whatsapp-light)\",\n        },\n        \"chat-bg\": \"var(--chat-bg)\",\n        \"received-msg\": \"var(--received-msg)\",\n        \"sent-msg\": \"var(--sent-msg)\",\n      },\n      fontFamily: {\n        sans: [\"var(--font-sans)\"],\n        serif: [\"var(--font-serif)\"],\n        mono: [\"var(--font-mono)\"],\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":3040},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":971},"server/db.ts":{"content":"import { Pool, neonConfig } from '@neondatabase/serverless';\nimport { drizzle } from 'drizzle-orm/neon-serverless';\nimport ws from \"ws\";\nimport * as schema from \"@shared/schema\";\n\nneonConfig.webSocketConstructor = ws;\n\n// Set your external database URL\nconst DATABASE_URL = \"postgresql://neondb_owner:npg_1IpD2XOutJMC@ep-empty-queen-ae788c7b-pooler.c-2.us-east-2.aws.neon.tech/neondb?sslmode=require&channel_binding=require\";\n\nif (!DATABASE_URL) {\n  throw new Error(\n    \"DATABASE_URL must be set. Did you forget to provision a database?\",\n  );\n}\n\nexport const pool = new Pool({ connectionString: DATABASE_URL });\nexport const db = drizzle({ client: pool, schema });","size_bytes":666},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2066},"server/routes.ts":{"content":"import type { Express, Request, Response, NextFunction } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { WebSocketServer, WebSocket } from \"ws\";\nimport bcrypt from \"bcrypt\";\nimport session from \"express-session\";\nimport { storage } from \"./storage\";\nimport { WhatsAppAPIService } from \"./whatsapp-api\";\nimport { insertContactSchema, insertMessageSchema, insertTemplateSchema, insertBroadcastSchema } from \"@shared/schema\";\n\ninterface AuthenticatedRequest extends Request {\n  session: session.Session & session.SessionData & { userId?: string };\n}\n\n// Session middleware\nconst sessionMiddleware = session({\n  secret: process.env.SESSION_SECRET || \"whatsapp-business-secret-key\",\n  resave: false,\n  saveUninitialized: false,\n  cookie: {\n    secure: process.env.NODE_ENV === \"production\",\n    httpOnly: true,\n    maxAge: 24 * 60 * 60 * 1000, // 24 hours\n  },\n});\n\n// Authentication middleware\nconst requireAuth = (req: AuthenticatedRequest, res: Response, next: NextFunction) => {\n  if (!req.session.userId) {\n    return res.status(401).json({ message: \"Unauthorized\" });\n  }\n  next();\n};\n\n// WebSocket connection map\nconst wsConnections = new Map<string, WebSocket>();\n\n// n8n integration helper\nasync function sendToN8n(endpoint: string, data: any) {\n  const n8nUrl = process.env.N8N_WEBHOOK_URL || \"http://localhost:5678/webhook\";\n  \n  try {\n    const response = await fetch(`${n8nUrl}/${endpoint}`, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"Authorization\": `Bearer ${process.env.N8N_API_KEY || \"\"}`,\n      },\n      body: JSON.stringify(data),\n    });\n    \n    if (!response.ok) {\n      throw new Error(`n8n API error: ${response.statusText}`);\n    }\n    \n    return await response.json();\n  } catch (error) {\n    console.error(\"n8n integration error:\", error);\n    throw error;\n  }\n}\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // Apply session middleware\n  app.use(sessionMiddleware);\n\n  // Authentication routes\n  app.post(\"/api/auth/login\", async (req: AuthenticatedRequest, res) => {\n    try {\n      const { username, password } = req.body;\n      \n      console.log(\"🔐 Login attempt:\", username);\n      \n      if (!username || !password) {\n        return res.status(400).json({ message: \"Username and password required\" });\n      }\n\n      const user = await storage.getUserByUsername(username);\n      console.log(\"👤 User found:\", user ? \"yes\" : \"no\");\n      if (!user) {\n        return res.status(401).json({ message: \"Invalid credentials\" });\n      }\n\n      // Use bcrypt to compare password with hash\n      console.log(\"🔑 Testing password...\");\n      const isValid = await bcrypt.compare(password, user.password);\n      console.log(\"✅ Password valid:\", isValid);\n      if (!isValid) {\n        return res.status(401).json({ message: \"Invalid credentials\" });\n      }\n\n      req.session.userId = user.id;\n      res.json({ \n        user: { \n          id: user.id, \n          username: user.username \n        } \n      });\n    } catch (error) {\n      console.error(\"Login error:\", error);\n      res.status(500).json({ message: \"Login failed\" });\n    }\n  });\n\n  app.post(\"/api/auth/logout\", (req: AuthenticatedRequest, res) => {\n    req.session.destroy((err: any) => {\n      if (err) {\n        return res.status(500).json({ message: \"Logout failed\" });\n      }\n      res.json({ message: \"Logged out successfully\" });\n    });\n  });\n\n  app.get(\"/api/auth/user\", requireAuth, async (req: AuthenticatedRequest, res) => {\n    try {\n      const user = await storage.getUser(req.session.userId!);\n      if (!user) {\n        return res.status(404).json({ message: \"User not found\" });\n      }\n      res.json({ \n        id: user.id, \n        username: user.username \n      });\n    } catch (error) {\n      console.error(\"Get user error:\", error);\n      res.status(500).json({ message: \"Failed to get user\" });\n    }\n  });\n\n  // Contact routes\n  app.get(\"/api/contacts\", requireAuth, async (req, res) => {\n    try {\n      const contacts = await storage.getContacts();\n      res.json(contacts);\n    } catch (error) {\n      console.error(\"Get contacts error:\", error);\n      res.status(500).json({ message: \"Failed to get contacts\" });\n    }\n  });\n\n  app.post(\"/api/contacts\", requireAuth, async (req, res) => {\n    try {\n      const contactData = insertContactSchema.parse(req.body);\n      const contact = await storage.createContact(contactData);\n      res.status(201).json(contact);\n    } catch (error) {\n      console.error(\"Create contact error:\", error);\n      res.status(500).json({ message: \"Failed to create contact\" });\n    }\n  });\n\n  app.put(\"/api/contacts/:id\", requireAuth, async (req, res) => {\n    try {\n      const { id } = req.params;\n      const updates = insertContactSchema.partial().parse(req.body);\n      const contact = await storage.updateContact(id, updates);\n      res.json(contact);\n    } catch (error) {\n      console.error(\"Update contact error:\", error);\n      res.status(500).json({ message: \"Failed to update contact\" });\n    }\n  });\n\n  app.delete(\"/api/contacts/:id\", requireAuth, async (req, res) => {\n    try {\n      const { id } = req.params;\n      await storage.deleteContact(id);\n      res.json({ message: \"Contact deleted successfully\" });\n    } catch (error) {\n      console.error(\"Delete contact error:\", error);\n      res.status(500).json({ message: \"Failed to delete contact\" });\n    }\n  });\n\n  // Conversation routes\n  app.get(\"/api/conversations\", requireAuth, async (req, res) => {\n    try {\n      const conversations = await storage.getConversations();\n      res.json(conversations);\n    } catch (error) {\n      console.error(\"Get conversations error:\", error);\n      res.status(500).json({ message: \"Failed to get conversations\" });\n    }\n  });\n\n  app.get(\"/api/conversations/:id/messages\", requireAuth, async (req, res) => {\n    try {\n      const { id } = req.params;\n      const messages = await storage.getMessages(id);\n      res.json(messages);\n    } catch (error) {\n      console.error(\"Get messages error:\", error);\n      res.status(500).json({ message: \"Failed to get messages\" });\n    }\n  });\n\n  // Template message route\n  app.post(\"/api/messages/template\", requireAuth, async (req: any, res) => {\n    try {\n      const { conversationId, contactId, templateId } = req.body;\n      const userId = req.session.userId;\n\n      if (!conversationId || !contactId || !templateId) {\n        return res.status(400).json({ message: \"Missing required fields\" });\n      }\n\n      // Get template details\n      const template = await storage.getTemplate(templateId);\n      if (!template) {\n        return res.status(404).json({ message: \"Template not found\" });\n      }\n\n      // Get contact details\n      const contact = await storage.getContact(contactId);\n      if (!contact) {\n        return res.status(404).json({ message: \"Contact not found\" });\n      }\n\n      // Create message record with template details\n      const messageData = {\n        conversationId,\n        contactId,\n        content: template.content,\n        type: \"template\",\n        direction: \"outbound\" as const,\n        status: \"sent\" as const,\n        templateId: templateId,\n        metadata: {\n          templateName: template.name,\n          templateCategory: template.category\n        },\n      };\n\n      const message = await storage.createMessage(messageData);\n\n      // Send via WhatsApp API using template\n      const config = await storage.getAppConfig(userId);\n      if (config && config.whatsappAccessToken && config.whatsappPhoneNumberId) {\n        console.log(\"📤 Sending template message via WhatsApp API\");\n        const whatsappService = new WhatsAppAPIService(config);\n        \n        const result = await whatsappService.sendTemplateMessage(\n          contact.phone, \n          template.name,\n          {} // No variables for now - can be enhanced later\n        );\n        \n        if (result.success) {\n          console.log(\"✅ Template message sent successfully\");\n          await storage.updateMessageStatus(message.id, \"delivered\");\n        } else {\n          console.error(\"❌ WhatsApp template send error:\", result.error);\n          await storage.updateMessageStatus(message.id, \"failed\");\n        }\n      }\n\n      // Broadcast to WebSocket clients\n      wsConnections.forEach((ws) => {\n        if (ws.readyState === WebSocket.OPEN) {\n          ws.send(JSON.stringify({\n            type: \"new_message\",\n            data: message,\n          }));\n        }\n      });\n\n      res.status(201).json(message);\n    } catch (error) {\n      console.error(\"Send template message error:\", error);\n      res.status(500).json({ message: \"Failed to send template message\" });\n    }\n  });\n\n  // Message routes\n  app.post(\"/api/messages\", requireAuth, async (req: any, res) => {\n    try {\n      const messageData = insertMessageSchema.parse(req.body);\n      const userId = req.session.userId;\n      const message = await storage.createMessage(messageData);\n      \n      // Send via WhatsApp API for outbound messages\n      if (messageData.direction === \"outbound\") {\n        const config = await storage.getAppConfig(userId);\n        console.log(\"📤 Sending outbound message, config:\", config ? \"found\" : \"not found\");\n        \n        if (config && config.whatsappAccessToken && config.whatsappPhoneNumberId) {\n          console.log(\"🚀 Using direct WhatsApp API\");\n          // Use direct WhatsApp API\n          const whatsappService = new WhatsAppAPIService(config);\n          const contact = await storage.getContact(messageData.contactId);\n          \n          if (contact?.phone) {\n            console.log(\"📞 Sending to phone:\", contact.phone);\n            const result = await whatsappService.sendTextMessage(contact.phone, messageData.content);\n            \n            if (result.success) {\n              console.log(\"✅ Message sent successfully\");\n              await storage.updateMessageStatus(message.id, \"delivered\");\n            } else {\n              console.error(\"❌ WhatsApp API send error:\", result.error);\n              await storage.updateMessageStatus(message.id, \"failed\");\n            }\n          } else {\n            console.error(\"❌ No phone number found for contact\");\n            await storage.updateMessageStatus(message.id, \"failed\");\n          }\n        } else if (config?.n8nEnabled && config?.n8nWebhookUrl) {\n          console.log(\"🔄 Using n8n fallback\");\n          // Fallback to n8n if configured\n          try {\n            const contact = await storage.getContact(messageData.contactId);\n            await sendToN8n(\"send-message\", {\n              phone: contact?.phone,\n              message: messageData.content,\n              messageId: message.id,\n            });\n            await storage.updateMessageStatus(message.id, \"sent\");\n          } catch (n8nError) {\n            console.error(\"❌ n8n send error:\", n8nError);\n            await storage.updateMessageStatus(message.id, \"failed\");\n          }\n        } else {\n          // No delivery method configured\n          console.error(\"❌ No delivery method configured - missing WhatsApp credentials\");\n          \n          if (config?.whatsappPhoneNumberId && !config?.whatsappAccessToken) {\n            console.error(\"📱 Phone Number ID found but Access Token missing!\");\n            console.error(\"💡 Solution: Go to Settings → WhatsApp Business → Add your Access Token\");\n          }\n          \n          console.log(\"Config status:\", {\n            hasConfig: !!config,\n            hasAccessToken: !!config?.whatsappAccessToken,\n            hasPhoneNumberId: !!config?.whatsappPhoneNumberId,\n            isConfigured: config?.isConfigured,\n            n8nEnabled: config?.n8nEnabled\n          });\n          await storage.updateMessageStatus(message.id, \"failed\");\n        }\n      }\n      \n      // Broadcast to WebSocket clients\n      wsConnections.forEach((ws) => {\n        if (ws.readyState === WebSocket.OPEN) {\n          ws.send(JSON.stringify({\n            type: \"new_message\",\n            data: message,\n          }));\n        }\n      });\n      \n      res.status(201).json(message);\n    } catch (error) {\n      console.error(\"Send message error:\", error);\n      res.status(500).json({ message: \"Failed to send message\" });\n    }\n  });\n\n  // Template routes\n  app.get(\"/api/templates\", requireAuth, async (req, res) => {\n    try {\n      const templates = await storage.getTemplates();\n      res.json(templates);\n    } catch (error) {\n      console.error(\"Get templates error:\", error);\n      res.status(500).json({ message: \"Failed to get templates\" });\n    }\n  });\n\n  app.post(\"/api/templates\", requireAuth, async (req, res) => {\n    try {\n      const templateData = insertTemplateSchema.parse(req.body);\n      const template = await storage.createTemplate(templateData);\n      res.status(201).json(template);\n    } catch (error) {\n      console.error(\"Create template error:\", error);\n      res.status(500).json({ message: \"Failed to create template\" });\n    }\n  });\n\n  app.put(\"/api/templates/:id\", requireAuth, async (req, res) => {\n    try {\n      const { id } = req.params;\n      const updates = insertTemplateSchema.partial().parse(req.body);\n      const template = await storage.updateTemplate(id, updates);\n      res.json(template);\n    } catch (error) {\n      console.error(\"Update template error:\", error);\n      res.status(500).json({ message: \"Failed to update template\" });\n    }\n  });\n\n  app.delete(\"/api/templates/:id\", requireAuth, async (req, res) => {\n    try {\n      const { id } = req.params;\n      await storage.deleteTemplate(id);\n      res.json({ message: \"Template deleted successfully\" });\n    } catch (error) {\n      console.error(\"Delete template error:\", error);\n      res.status(500).json({ message: \"Failed to delete template\" });\n    }\n  });\n\n  // Sync templates from Facebook Business Manager\n  app.post(\"/api/templates/sync\", requireAuth, async (req: any, res) => {\n    try {\n      const userId = req.session.userId;\n      const config = await storage.getAppConfig(userId);\n      \n      if (!config || !config.whatsappAccessToken || !config.whatsappPhoneNumberId) {\n        return res.status(400).json({ \n          message: \"WhatsApp configuration is incomplete. Please configure your WhatsApp access token and phone number ID.\" \n        });\n      }\n\n      const whatsappService = new WhatsAppAPIService(config);\n      const syncResult = await whatsappService.syncTemplatesFromFBM();\n\n      if (!syncResult.success) {\n        return res.status(400).json({ message: syncResult.error });\n      }\n\n      // Save templates to database\n      let syncedCount = 0;\n      for (const fbTemplate of syncResult.templates || []) {\n        try {\n          // Extract template content from Facebook template structure\n          let content = fbTemplate.components?.find((c: any) => c.type === \"BODY\")?.text || fbTemplate.name;\n          \n          // Check if template already exists (avoid duplicates)\n          const existingTemplates = await storage.getTemplates();\n          const exists = existingTemplates.find(t => t.name === fbTemplate.name);\n          \n          if (!exists) {\n            const templateData = {\n              name: fbTemplate.name,\n              content: content,\n              language: fbTemplate.language || \"en\",\n              category: fbTemplate.category?.toLowerCase() || \"general\",\n              status: \"approved\",\n              variables: fbTemplate.components?.find((c: any) => c.type === \"BODY\")?.example?.body_text?.[0] || [],\n              facebookTemplateId: fbTemplate.id\n            };\n\n            console.log(`📋 Creating template: ${fbTemplate.name}`);\n            await storage.createTemplate(templateData);\n            syncedCount++;\n          } else {\n            console.log(`📋 Template ${fbTemplate.name} already exists, skipping`);\n          }\n        } catch (error) {\n          console.warn(`Failed to sync template ${fbTemplate.name}:`, error);\n        }\n      }\n\n      res.json({ \n        message: `Successfully synced ${syncedCount} templates from Facebook Business Manager`,\n        synced: syncedCount,\n        total: syncResult.templates?.length || 0 \n      });\n    } catch (error) {\n      console.error(\"Template sync error:\", error);\n      res.status(500).json({ message: \"Failed to sync templates\" });\n    }\n  });\n\n  // Broadcast routes\n  app.get(\"/api/broadcasts\", requireAuth, async (req, res) => {\n    try {\n      const broadcasts = await storage.getBroadcasts();\n      res.json(broadcasts);\n    } catch (error) {\n      console.error(\"Get broadcasts error:\", error);\n      res.status(500).json({ message: \"Failed to get broadcasts\" });\n    }\n  });\n\n  app.post(\"/api/broadcasts\", requireAuth, async (req, res) => {\n    try {\n      const broadcastData = insertBroadcastSchema.parse(req.body);\n      const broadcast = await storage.createBroadcast(broadcastData);\n      \n      // Send to n8n for processing\n      try {\n        await sendToN8n(\"broadcast\", {\n          broadcastId: broadcast.id,\n          templateId: broadcast.templateId,\n          recipients: broadcast.recipients,\n          variables: broadcast.variables,\n        });\n        \n        await storage.updateBroadcast(broadcast.id, { status: \"sending\" });\n      } catch (n8nError) {\n        console.error(\"n8n broadcast error:\", n8nError);\n        await storage.updateBroadcast(broadcast.id, { status: \"failed\" });\n      }\n      \n      res.status(201).json(broadcast);\n    } catch (error) {\n      console.error(\"Create broadcast error:\", error);\n      res.status(500).json({ message: \"Failed to create broadcast\" });\n    }\n  });\n\n  // n8n webhook endpoints\n  app.post(\"/api/webhooks/message-status\", async (req, res) => {\n    try {\n      const { messageId, status } = req.body;\n      await storage.updateMessageStatus(messageId, status);\n      \n      // Broadcast status update to WebSocket clients\n      wsConnections.forEach((ws) => {\n        if (ws.readyState === WebSocket.OPEN) {\n          ws.send(JSON.stringify({\n            type: \"message_status_update\",\n            data: { messageId, status },\n          }));\n        }\n      });\n      \n      res.json({ success: true });\n    } catch (error) {\n      console.error(\"Message status webhook error:\", error);\n      res.status(500).json({ message: \"Failed to update message status\" });\n    }\n  });\n\n  app.post(\"/api/webhooks/incoming-message\", async (req, res) => {\n    try {\n      const { from, content, timestamp } = req.body;\n      \n      // Find or create contact\n      let contact = (await storage.getContacts()).find(c => c.phone === from);\n      if (!contact) {\n        contact = await storage.createContact({\n          name: `Contact ${from}`,\n          phone: from,\n          group: \"customer\",\n        });\n      }\n      \n      // Find or create conversation\n      const conversations = await storage.getConversations();\n      let conversation = conversations.find(c => c.contactId === contact!.id);\n      if (!conversation) {\n        const newConv = await storage.createConversation(contact.id);\n        conversation = { ...newConv, contact: contact };\n      }\n      \n      // Create message\n      const message = await storage.createMessage({\n        conversationId: conversation.id,\n        contactId: contact.id,\n        content,\n        type: \"text\",\n        direction: \"inbound\",\n        status: \"delivered\",\n        templateId: null,\n        metadata: null,\n      });\n      \n      // Broadcast to WebSocket clients\n      wsConnections.forEach((ws) => {\n        if (ws.readyState === WebSocket.OPEN) {\n          ws.send(JSON.stringify({\n            type: \"new_message\",\n            data: message,\n          }));\n        }\n      });\n      \n      res.json({ success: true });\n    } catch (error) {\n      console.error(\"Incoming message webhook error:\", error);\n      res.status(500).json({ message: \"Failed to process incoming message\" });\n    }\n  });\n\n  // Configuration routes\n  app.get(\"/api/settings/config\", requireAuth, async (req: any, res) => {\n    try {\n      const userId = req.session.userId;\n      const config = await storage.getAppConfig(userId) || {\n        whatsappAccessToken: \"\",\n        whatsappPhoneNumberId: \"\",\n        whatsappBusinessAccountId: \"\",\n        whatsappWebhookVerifyToken: \"\",\n        n8nWebhookUrl: \"\",\n        n8nApiKey: \"\",\n        n8nEnabled: false,\n        enableLogging: true,\n        webhookSecret: \"\",\n        isConfigured: false,\n      };\n      res.json(config);\n    } catch (error) {\n      console.error(\"Error fetching config:\", error);\n      res.status(500).json({ message: \"Failed to fetch configuration\" });\n    }\n  });\n\n  app.post(\"/api/settings/config\", requireAuth, async (req: any, res) => {\n    try {\n      const userId = req.session.userId;\n      \n      // Generate webhook secret if not provided\n      if (!req.body.webhookSecret) {\n        req.body.webhookSecret = \"webhook_verify_token_123\";\n      }\n      \n      // Set isConfigured based on required fields\n      if (req.body.whatsappAccessToken && req.body.whatsappPhoneNumberId) {\n        req.body.isConfigured = true;\n      }\n      \n      const config = await storage.updateAppConfig(userId, req.body);\n      res.json({ message: \"Configuration saved successfully\", config });\n    } catch (error) {\n      console.error(\"Error saving config:\", error);\n      res.status(500).json({ message: \"Failed to save configuration\" });\n    }\n  });\n\n  app.post(\"/api/settings/test-connection\", requireAuth, async (req: any, res) => {\n    try {\n      const { type } = req.body;\n      const userId = req.session.userId;\n      const config = await storage.getAppConfig(userId);\n      \n      if (type === \"n8n\") {\n        if (!config?.n8nWebhookUrl) {\n          return res.status(400).json({ message: \"n8n webhook URL not configured\" });\n        }\n        \n        try {\n          const testResponse = await fetch(`${config.n8nWebhookUrl}/test`, {\n            method: \"POST\",\n            headers: { \"Content-Type\": \"application/json\" },\n            body: JSON.stringify({ test: true, timestamp: Date.now() }),\n          });\n          \n          if (testResponse.ok) {\n            res.json({ message: \"n8n connection successful\" });\n          } else {\n            res.status(400).json({ message: \"n8n connection failed\" });\n          }\n        } catch (fetchError) {\n          res.status(400).json({ message: \"n8n connection failed: Network error\" });\n        }\n      } else if (type === \"whatsapp\") {\n        if (!config?.whatsappAccessToken || !config?.whatsappPhoneNumberId) {\n          return res.status(400).json({ message: \"WhatsApp credentials not configured\" });\n        }\n        \n        try {\n          const whatsappResponse = await fetch(`https://graph.facebook.com/v18.0/${config.whatsappPhoneNumberId}`, {\n            headers: {\n              \"Authorization\": `Bearer ${config.whatsappAccessToken}`,\n            },\n          });\n          \n          if (whatsappResponse.ok) {\n            res.json({ message: \"WhatsApp API connection successful\" });\n          } else {\n            const result = await whatsappResponse.json();\n            res.status(400).json({ message: result.error?.message || \"WhatsApp API connection failed\" });\n          }\n        } catch (fetchError) {\n          res.status(400).json({ message: \"WhatsApp API connection failed: Network error\" });\n        }\n      } else {\n        res.status(400).json({ message: \"Invalid connection test type\" });\n      }\n    } catch (error) {\n      console.error(\"Error testing connection:\", error);\n      res.status(500).json({ message: \"Connection test failed\" });\n    }\n  });\n\n  // WhatsApp Webhook endpoints\n  app.get(\"/api/webhooks/whatsapp\", async (req, res) => {\n    console.log(\"🔍 Webhook verification request:\", req.query);\n    \n    // Webhook verification\n    const mode = req.query['hub.mode'];\n    const token = req.query['hub.verify_token'];\n    const challenge = req.query['hub.challenge'];\n    \n    console.log(\"📋 Verification details:\", { mode, token, challenge });\n    \n    // For now, accept any verification token - in production, this should validate against stored config\n    if (mode === 'subscribe' && challenge) {\n      console.log('✅ Webhook verified successfully');\n      res.status(200).send(challenge);\n    } else {\n      console.log('❌ Webhook verification failed');\n      res.status(403).send('Forbidden');\n    }\n  });\n\n  app.post(\"/api/webhooks/whatsapp\", async (req, res) => {\n    try {\n      console.log(\"📨 Webhook received:\", JSON.stringify(req.body, null, 2));\n      \n      // Log incoming webhook for debugging\n      try {\n        await storage.createWebhookLog({\n          source: \"whatsapp\",\n          payload: req.body,\n          status: \"received\",\n        });\n      } catch (logError) {\n        console.error(\"Failed to log webhook:\", logError);\n      }\n\n      // Parse WhatsApp webhook payload\n      if (req.body.entry) {\n        for (const entry of req.body.entry) {\n          console.log(\"📋 Processing entry:\", entry.id);\n          for (const change of entry.changes || []) {\n            console.log(\"🔄 Processing change:\", change.field);\n            \n            // Handle incoming messages\n            if (change.value?.messages) {\n              console.log(\"💬 Found messages:\", change.value.messages.length);\n              \n              for (const msg of change.value.messages) {\n                console.log(\"📩 Processing message from:\", msg.from, \"content:\", msg.text?.body);\n                \n                try {\n                  // Find or create conversation\n                  const conversations = await storage.getConversations();\n                  let conversation = conversations.find(c => \n                    c.contact?.phone === msg.from\n                  );\n                  \n                  if (!conversation) {\n                    console.log(\"👤 Creating new contact and conversation for:\", msg.from);\n                    // Create new contact and conversation\n                    const contact = await storage.createContact({\n                      name: `Contact ${msg.from}`,\n                      phone: msg.from,\n                      group: \"customer\",\n                    });\n                    \n                    const newConversation = await storage.createConversation(contact.id);\n                    conversation = { ...newConversation, contact };\n                    console.log(\"✅ Created conversation:\", newConversation.id);\n                  }\n                  \n                  if (conversation) {\n                    // Create incoming message\n                    const message = await storage.createMessage({\n                      conversationId: conversation.id,\n                      contactId: conversation.contactId || conversation.contact?.id || \"\",\n                      content: msg.text?.body || msg.type || \"Media message\",\n                      direction: \"inbound\",\n                      status: \"delivered\",\n                    });\n                    \n                    console.log(\"✅ Created message:\", message.id, \"in conversation:\", conversation.id);\n                  \n                    // Notify WebSocket clients\n                    const wsMessage = {\n                      type: \"new_message\",\n                      data: message,\n                    };\n                    \n                    console.log(\"📡 Broadcasting to\", wsConnections.size, \"WebSocket clients\");\n                    \n                    wsConnections.forEach((ws) => {\n                      if (ws.readyState === WebSocket.OPEN) {\n                        ws.send(JSON.stringify(wsMessage));\n                      }\n                    });\n                  }\n                  \n                } catch (msgError) {\n                  console.error(\"❌ Error processing message:\", msgError);\n                }\n              }\n            }\n            \n            // Handle message status updates\n            if (change.value?.statuses) {\n              console.log(\"📊 Message status updates:\", change.value.statuses.length);\n              for (const status of change.value.statuses) {\n                console.log(\"📈 Status update:\", status.id, \"->\", status.status);\n                \n                try {\n                  // Update message status in database\n                  await storage.updateMessageStatus(status.id, status.status);\n                  \n                  // If message is read, update read timestamp\n                  if (status.status === \"read\") {\n                    await storage.updateMessageReadStatus(status.id, true, new Date());\n                  }\n                  \n                  // Broadcast status update to WebSocket clients\n                  const wsMessage = {\n                    type: \"message_status_update\",\n                    data: { \n                      messageId: status.id, \n                      status: status.status,\n                      readAt: status.status === \"read\" ? new Date().toISOString() : null\n                    },\n                  };\n                  \n                  wsConnections.forEach((ws) => {\n                    if (ws.readyState === WebSocket.OPEN) {\n                      ws.send(JSON.stringify(wsMessage));\n                    }\n                  });\n                  \n                } catch (statusError) {\n                  console.error(\"❌ Error updating message status:\", statusError);\n                }\n              }\n            }\n          }\n        }\n      } else {\n        console.log(\"⚠️ No entry found in webhook payload\");\n      }\n      \n      res.status(200).send('OK');\n    } catch (error) {\n      console.error(\"❌ Webhook processing error:\", error);\n      \n      try {\n        await storage.createWebhookLog({\n          source: \"whatsapp\",\n          payload: req.body,\n          status: \"failed\",\n          errorMessage: error instanceof Error ? error.message : \"Unknown error\",\n        });\n      } catch (logError) {\n        console.error(\"Failed to log webhook error:\", logError);\n      }\n      \n      res.status(500).send('Error');\n    }\n  });\n\n  // Broadcast endpoints with enhanced functionality\n  app.post(\"/api/broadcasts\", requireAuth, async (req: any, res) => {\n    try {\n      const broadcastData = insertBroadcastSchema.parse(req.body);\n      const userId = req.session.userId;\n      \n      // Get WhatsApp configuration\n      const config = await storage.getAppConfig(userId);\n      if (!config || !config.isConfigured) {\n        return res.status(400).json({ message: \"WhatsApp API not configured\" });\n      }\n      \n      const broadcast = await storage.createBroadcast(broadcastData);\n      \n      // Process broadcast immediately or schedule it\n      if (!broadcastData.scheduledFor || new Date(broadcastData.scheduledFor) <= new Date()) {\n        processBroadcast(broadcast, config);\n      }\n      \n      res.status(201).json(broadcast);\n    } catch (error) {\n      console.error(\"Broadcast creation error:\", error);\n      res.status(500).json({ message: \"Failed to create broadcast\" });\n    }\n  });\n\n  // Function to process broadcasts\n  async function processBroadcast(broadcast: any, config: any) {\n    try {\n      const whatsappService = new WhatsAppAPIService(config);\n      const template = await storage.getTemplate(broadcast.templateId);\n      \n      if (!template) {\n        await storage.updateBroadcast(broadcast.id, { status: \"failed\" });\n        return;\n      }\n      \n      await storage.updateBroadcast(broadcast.id, { status: \"sending\", sentAt: new Date() });\n      \n      let sentCount = 0;\n      let failedCount = 0;\n      \n      // Process recipients from CSV data or regular recipients\n      const recipients = broadcast.csvData || broadcast.recipients;\n      \n      for (const recipientData of recipients) {\n        try {\n          let phoneNumber, variables;\n          \n          if (typeof recipientData === 'string') {\n            // Regular recipient ID\n            const contact = await storage.getContact(recipientData);\n            phoneNumber = contact?.phone;\n            variables = broadcast.variables || {};\n          } else {\n            // CSV data with phone and variables\n            phoneNumber = recipientData.phone;\n            variables = { ...broadcast.variables, ...recipientData };\n          }\n          \n          if (!phoneNumber) {\n            failedCount++;\n            continue;\n          }\n          \n          const result = await whatsappService.sendTemplateMessage(\n            phoneNumber,\n            template.name,\n            variables\n          );\n          \n          if (result.success) {\n            sentCount++;\n          } else {\n            failedCount++;\n          }\n          \n          // Add delay between messages to avoid rate limiting\n          await new Promise(resolve => setTimeout(resolve, 1000));\n          \n        } catch (error) {\n          failedCount++;\n          console.error(\"Broadcast send error:\", error);\n        }\n      }\n      \n      await storage.updateBroadcast(broadcast.id, {\n        status: \"completed\",\n        sentCount,\n        failedCount,\n      });\n      \n    } catch (error) {\n      console.error(\"Broadcast processing error:\", error);\n      await storage.updateBroadcast(broadcast.id, { status: \"failed\" });\n    }\n  }\n\n  // Media upload endpoint for chat\n  app.post(\"/api/messages/media\", requireAuth, async (req: AuthenticatedRequest, res) => {\n    try {\n      const { conversationId, contactId, mediaType, mediaData, caption, filename } = req.body;\n      \n      if (!mediaData || !mediaType || !conversationId || !contactId) {\n        return res.status(400).json({ message: \"Missing required fields\" });\n      }\n\n      // Get config for WhatsApp API\n      const config = await storage.getAppConfig(req.session.userId!);\n      if (!config) {\n        return res.status(400).json({ message: \"WhatsApp configuration not found\" });\n      }\n\n      // Get contact phone number\n      const contact = await storage.getContact(contactId);\n      if (!contact) {\n        return res.status(404).json({ message: \"Contact not found\" });\n      }\n\n      const whatsappService = new WhatsAppAPIService(config);\n      \n      // Convert base64 to buffer\n      const buffer = Buffer.from(mediaData, 'base64');\n      \n      // Upload media to WhatsApp\n      const uploadResult = await whatsappService.uploadMedia(buffer, mediaType, filename);\n      \n      if (!uploadResult.success || !uploadResult.mediaId) {\n        return res.status(400).json({ message: uploadResult.error || \"Failed to upload media\" });\n      }\n\n      // Send media message\n      const sendResult = await whatsappService.sendMediaMessage(\n        contact.phone,\n        mediaType as 'image' | 'video' | 'document',\n        uploadResult.mediaId,\n        caption,\n        filename\n      );\n\n      if (!sendResult.success) {\n        return res.status(400).json({ message: sendResult.error || \"Failed to send media message\" });\n      }\n\n      // Store message in database\n      const message = await storage.createMessage({\n        conversationId,\n        contactId,\n        content: caption || `${mediaType} message`,\n        type: \"media\",\n        direction: \"outbound\",\n        status: \"sent\",\n        templateId: null,\n        metadata: {\n          mediaType,\n          mediaId: uploadResult.mediaId,\n          filename,\n          caption\n        },\n      });\n\n      // Broadcast to all connected WebSocket clients\n      wsConnections.forEach((ws) => {\n        if (ws.readyState === WebSocket.OPEN) {\n          ws.send(JSON.stringify({\n            type: \"new_message\",\n            message,\n          }));\n        }\n      });\n\n      res.json(message);\n    } catch (error) {\n      console.error(\"Error sending media message:\", error);\n      res.status(500).json({ message: \"Failed to send media message\" });\n    }\n  });\n\n  // Template with variables endpoint\n  app.post(\"/api/messages/template-with-variables\", requireAuth, async (req: AuthenticatedRequest, res) => {\n    try {\n      const { conversationId, contactId, templateId, variables } = req.body;\n      \n      if (!conversationId || !contactId || !templateId) {\n        return res.status(400).json({ message: \"Missing required fields\" });\n      }\n\n      // Get template details\n      const template = await storage.getTemplate(templateId);\n      if (!template) {\n        return res.status(404).json({ message: \"Template not found\" });\n      }\n\n      // Get contact details\n      const contact = await storage.getContact(contactId);\n      if (!contact) {\n        return res.status(404).json({ message: \"Contact not found\" });\n      }\n\n      // Get config for WhatsApp API\n      const config = await storage.getAppConfig(req.session.userId!);\n      if (!config) {\n        return res.status(400).json({ message: \"WhatsApp configuration not found\" });\n      }\n\n      const whatsappService = new WhatsAppAPIService(config);\n      \n      // Send template message with variables\n      const result = await whatsappService.sendTemplateMessage(\n        contact.phone, \n        template.name,\n        variables || {}\n      );\n\n      if (!result.success) {\n        return res.status(400).json({ message: result.error || \"Failed to send template message\" });\n      }\n\n      // Create message record with template details and variables\n      const messageData = {\n        conversationId,\n        contactId,\n        content: template.content,\n        type: \"template\",\n        direction: \"outbound\" as const,\n        status: \"sent\" as const,\n        templateId: templateId,\n        metadata: {\n          templateName: template.name,\n          templateCategory: template.category,\n          variables: variables\n        },\n      };\n\n      const message = await storage.createMessage(messageData);\n\n      // Broadcast to all connected WebSocket clients\n      wsConnections.forEach((ws) => {\n        if (ws.readyState === WebSocket.OPEN) {\n          ws.send(JSON.stringify({\n            type: \"new_message\",\n            message,\n          }));\n        }\n      });\n\n      res.json(message);\n    } catch (error) {\n      console.error(\"Error sending template message with variables:\", error);\n      res.status(500).json({ message: \"Failed to send template message\" });\n    }\n  });\n\n  const httpServer = createServer(app);\n\n  // WebSocket server\n  const wss = new WebSocketServer({ server: httpServer, path: \"/ws\" });\n\n  wss.on(\"connection\", (ws) => {\n    const connectionId = Math.random().toString(36).substr(2, 9);\n    wsConnections.set(connectionId, ws);\n    \n    ws.on(\"close\", () => {\n      wsConnections.delete(connectionId);\n    });\n    \n    ws.on(\"error\", (error) => {\n      console.error(\"WebSocket error:\", error);\n      wsConnections.delete(connectionId);\n    });\n  });\n\n  return httpServer;\n}\n","size_bytes":38801},"server/storage.ts":{"content":"import {\n  users,\n  contacts,\n  conversations,\n  messages,\n  templates,\n  broadcasts,\n  appConfig,\n  webhookLogs,\n  type User,\n  type InsertUser,\n  type Contact,\n  type InsertContact,\n  type Conversation,\n  type ConversationWithContact,\n  type Message,\n  type InsertMessage,\n  type Template,\n  type InsertTemplate,\n  type Broadcast,\n  type InsertBroadcast,\n  type AppConfig,\n  type InsertAppConfig,\n  type WebhookLog,\n  type InsertWebhookLog,\n} from \"@shared/schema\";\nimport { randomUUID } from \"crypto\";\n\nexport interface IStorage {\n  // User operations\n  getUser(id: string): Promise<User | undefined>;\n  getUserByUsername(username: string): Promise<User | undefined>;\n  createUser(user: InsertUser): Promise<User>;\n\n  // Contact operations\n  getContacts(): Promise<Contact[]>;\n  getContact(id: string): Promise<Contact | undefined>;\n  createContact(contact: InsertContact): Promise<Contact>;\n  updateContact(id: string, contact: Partial<InsertContact>): Promise<Contact>;\n  deleteContact(id: string): Promise<void>;\n\n  // Conversation operations\n  getConversations(): Promise<ConversationWithContact[]>;\n  getConversation(id: string): Promise<Conversation | undefined>;\n  createConversation(contactId: string): Promise<Conversation>;\n  updateConversation(id: string, updates: Partial<Conversation>): Promise<void>;\n\n  // Message operations\n  getMessages(conversationId: string): Promise<Message[]>;\n  createMessage(message: InsertMessage): Promise<Message>;\n  updateMessageStatus(id: string, status: string): Promise<void>;\n  updateMessageReadStatus(id: string, isRead: boolean, readAt: Date): Promise<void>;\n\n  // Template operations\n  getTemplates(): Promise<Template[]>;\n  getTemplate(id: string): Promise<Template | undefined>;\n  createTemplate(template: InsertTemplate): Promise<Template>;\n  updateTemplate(id: string, template: Partial<InsertTemplate>): Promise<Template>;\n  deleteTemplate(id: string): Promise<void>;\n\n  // Broadcast operations\n  getBroadcasts(): Promise<Broadcast[]>;\n  getBroadcast(id: string): Promise<Broadcast | undefined>;\n  createBroadcast(broadcast: InsertBroadcast): Promise<Broadcast>;\n  updateBroadcast(id: string, updates: Partial<Broadcast>): Promise<void>;\n\n  // Configuration operations\n  getAppConfig(userId: string): Promise<AppConfig | undefined>;\n  updateAppConfig(userId: string, config: Partial<InsertAppConfig>): Promise<AppConfig>;\n\n  // Webhook log operations\n  createWebhookLog(log: InsertWebhookLog): Promise<WebhookLog>;\n  getWebhookLogs(limit?: number): Promise<WebhookLog[]>;\n}\n\n// MemStorage class removed - using DatabaseStorage instead\nclass MemStorage implements IStorage {\n  private users: Map<string, User> = new Map();\n  private contacts: Map<string, Contact> = new Map();\n  private conversations: Map<string, Conversation> = new Map();\n  private messages: Map<string, Message> = new Map();\n  private templates: Map<string, Template> = new Map();\n  private broadcasts: Map<string, Broadcast> = new Map();\n  private appConfigs: Map<string, AppConfig> = new Map();\n  private webhookLogs: Map<string, WebhookLog> = new Map();\n\n  constructor() {\n    // Initialize with sample data\n    this.initSampleData();\n  }\n\n  private initSampleData() {\n    // Create default user\n    const defaultUser: User = {\n      id: randomUUID(),\n      username: \"admin\",\n      password: \"admin123\", // In production, this should be hashed\n      createdAt: new Date(),\n    };\n    this.users.set(defaultUser.id, defaultUser);\n\n    // Create sample templates\n    const welcomeTemplate: Template = {\n      id: randomUUID(),\n      name: \"Welcome Message\",\n      category: \"greeting\",\n      content: \"Hello {{customer_name}}! Welcome to our business. How can we help you today?\",\n      variables: [\"customer_name\"],\n      isActive: true,\n      createdAt: new Date(),\n    };\n\n    const catalogTemplate: Template = {\n      id: randomUUID(),\n      name: \"Product Catalog\",\n      category: \"marketing\",\n      content: \"Hi {{customer_name}}! Check out our latest catalog with exclusive offers. Download here: {{catalog_link}}\",\n      variables: [\"customer_name\", \"catalog_link\"],\n      isActive: true,\n      createdAt: new Date(),\n    };\n\n    const orderTemplate: Template = {\n      id: randomUUID(),\n      name: \"Order Confirmation\",\n      category: \"transactional\",\n      content: \"Thank you {{customer_name}}! Your order #{{order_id}} has been confirmed. Estimated delivery: {{delivery_date}}\",\n      variables: [\"customer_name\", \"order_id\", \"delivery_date\"],\n      isActive: true,\n      createdAt: new Date(),\n    };\n\n    this.templates.set(welcomeTemplate.id, welcomeTemplate);\n    this.templates.set(catalogTemplate.id, catalogTemplate);\n    this.templates.set(orderTemplate.id, orderTemplate);\n\n    // Create sample contacts\n    const contact1: Contact = {\n      id: randomUUID(),\n      name: \"John Smith\",\n      phone: \"+1234567890\",\n      email: \"john@example.com\",\n      group: \"customer\",\n      profileImageUrl: \"https://images.unsplash.com/photo-1507003211169-0a1dd7228f2d?ixlib=rb-4.0.3&w=48&h=48&fit=crop&crop=face\",\n      lastContact: new Date(Date.now() - 2 * 60 * 60 * 1000), // 2 hours ago\n      createdAt: new Date(),\n    };\n\n    const contact2: Contact = {\n      id: randomUUID(),\n      name: \"Sarah Johnson\",\n      phone: \"+1234567891\",\n      email: \"sarah@example.com\",\n      group: \"vip\",\n      profileImageUrl: \"https://images.unsplash.com/photo-1494790108755-2616b612b47c?ixlib=rb-4.0.3&w=48&h=48&fit=crop&crop=face\",\n      lastContact: new Date(Date.now() - 30 * 60 * 1000), // 30 minutes ago\n      createdAt: new Date(),\n    };\n\n    this.contacts.set(contact1.id, contact1);\n    this.contacts.set(contact2.id, contact2);\n\n    // Create sample conversations\n    const conv1: Conversation = {\n      id: randomUUID(),\n      contactId: contact1.id,\n      lastMessageId: \"\",\n      unreadCount: 2,\n      updatedAt: new Date(),\n    };\n\n    const conv2: Conversation = {\n      id: randomUUID(),\n      contactId: contact2.id,\n      lastMessageId: \"\",\n      unreadCount: 0,\n      updatedAt: new Date(),\n    };\n\n    this.conversations.set(conv1.id, conv1);\n    this.conversations.set(conv2.id, conv2);\n\n    // Create sample messages\n    const msg1: Message = {\n      id: randomUUID(),\n      conversationId: conv1.id,\n      contactId: contact1.id,\n      content: \"Hi! I'm interested in your products. Can you tell me more about your pricing?\",\n      type: \"text\",\n      direction: \"inbound\",\n      status: \"delivered\",\n      templateId: null,\n      metadata: null,\n      timestamp: new Date(Date.now() - 4 * 60 * 1000), // 4 minutes ago\n    };\n\n    const msg2: Message = {\n      id: randomUUID(),\n      conversationId: conv1.id,\n      contactId: contact1.id,\n      content: \"Hello! Thank you for your interest. I'd be happy to help you with our product information.\",\n      type: \"text\",\n      direction: \"outbound\",\n      status: \"read\",\n      templateId: null,\n      metadata: null,\n      timestamp: new Date(Date.now() - 3 * 60 * 1000), // 3 minutes ago\n    };\n\n    const msg3: Message = {\n      id: randomUUID(),\n      conversationId: conv1.id,\n      contactId: contact1.id,\n      content: \"Thank you for the quick response! This is exactly what I needed.\",\n      type: \"text\",\n      direction: \"inbound\",\n      status: \"delivered\",\n      templateId: null,\n      metadata: null,\n      timestamp: new Date(Date.now() - 1 * 60 * 1000), // 1 minute ago\n    };\n\n    this.messages.set(msg1.id, msg1);\n    this.messages.set(msg2.id, msg2);\n    this.messages.set(msg3.id, msg3);\n\n    // Update last message IDs\n    conv1.lastMessageId = msg3.id;\n    conv2.lastMessageId = \"\";\n  }\n\n  // User operations\n  async getUser(id: string): Promise<User | undefined> {\n    return this.users.get(id);\n  }\n\n  async getUserByUsername(username: string): Promise<User | undefined> {\n    return Array.from(this.users.values()).find(user => user.username === username);\n  }\n\n  async createUser(insertUser: InsertUser): Promise<User> {\n    const id = randomUUID();\n    const user: User = { ...insertUser, id, createdAt: new Date() };\n    this.users.set(id, user);\n    return user;\n  }\n\n  // Contact operations\n  async getContacts(): Promise<Contact[]> {\n    return Array.from(this.contacts.values());\n  }\n\n  async getContact(id: string): Promise<Contact | undefined> {\n    return this.contacts.get(id);\n  }\n\n  async createContact(insertContact: InsertContact): Promise<Contact> {\n    const id = randomUUID();\n    const contact: Contact = { \n      ...insertContact, \n      id, \n      createdAt: new Date(),\n      group: insertContact.group || \"customer\",\n      email: insertContact.email || null,\n      profileImageUrl: insertContact.profileImageUrl || null,\n      lastContact: insertContact.lastContact || null\n    };\n    this.contacts.set(id, contact);\n    return contact;\n  }\n\n  async updateContact(id: string, updates: Partial<InsertContact>): Promise<Contact> {\n    const contact = this.contacts.get(id);\n    if (!contact) throw new Error(\"Contact not found\");\n    \n    const updatedContact = { ...contact, ...updates };\n    this.contacts.set(id, updatedContact);\n    return updatedContact;\n  }\n\n  async deleteContact(id: string): Promise<void> {\n    this.contacts.delete(id);\n  }\n\n  // Conversation operations\n  async getConversations(): Promise<ConversationWithContact[]> {\n    const conversations = Array.from(this.conversations.values());\n    return conversations.map(conv => ({\n      ...conv,\n      contact: this.contacts.get(conv.contactId)!,\n    })).filter(conv => conv.contact);\n  }\n\n  async getConversation(id: string): Promise<Conversation | undefined> {\n    return this.conversations.get(id);\n  }\n\n  async createConversation(contactId: string): Promise<Conversation> {\n    const id = randomUUID();\n    const conversation: Conversation = {\n      id,\n      contactId,\n      lastMessageId: \"\",\n      unreadCount: 0,\n      updatedAt: new Date(),\n    };\n    this.conversations.set(id, conversation);\n    return conversation;\n  }\n\n  async updateConversation(id: string, updates: Partial<Conversation>): Promise<void> {\n    const conversation = this.conversations.get(id);\n    if (!conversation) throw new Error(\"Conversation not found\");\n    \n    const updatedConversation = { ...conversation, ...updates };\n    this.conversations.set(id, updatedConversation);\n  }\n\n  // Message operations\n  async getMessages(conversationId: string): Promise<Message[]> {\n    return Array.from(this.messages.values())\n      .filter(msg => msg.conversationId === conversationId)\n      .sort((a, b) => (a.timestamp?.getTime() || 0) - (b.timestamp?.getTime() || 0));\n  }\n\n  async createMessage(insertMessage: InsertMessage): Promise<Message> {\n    const id = randomUUID();\n    const message: Message = { \n      ...insertMessage, \n      id, \n      timestamp: new Date(),\n      type: insertMessage.type || \"text\",\n      status: insertMessage.status || \"sent\",\n      templateId: insertMessage.templateId || null,\n      metadata: insertMessage.metadata || null\n    };\n    this.messages.set(id, message);\n    \n    // Update conversation\n    await this.updateConversation(message.conversationId, {\n      lastMessageId: id,\n      updatedAt: new Date(),\n    });\n    \n    return message;\n  }\n\n  async updateMessageStatus(id: string, status: string): Promise<void> {\n    const message = this.messages.get(id);\n    if (!message) throw new Error(\"Message not found\");\n    \n    message.status = status;\n    this.messages.set(id, message);\n  }\n\n  async updateMessageReadStatus(id: string, isRead: boolean, readAt: Date): Promise<void> {\n    const message = this.messages.get(id);\n    if (!message) throw new Error(\"Message not found\");\n    \n    message.isRead = isRead;\n    message.readAt = readAt;\n    this.messages.set(id, message);\n  }\n\n  // Template operations\n  async getTemplates(): Promise<Template[]> {\n    return Array.from(this.templates.values()).filter(t => t.isActive);\n  }\n\n  async getTemplate(id: string): Promise<Template | undefined> {\n    return this.templates.get(id);\n  }\n\n  async createTemplate(insertTemplate: InsertTemplate): Promise<Template> {\n    const id = randomUUID();\n    const template: Template = { \n      ...insertTemplate, \n      id, \n      createdAt: new Date(),\n      category: insertTemplate.category || \"general\",\n      variables: insertTemplate.variables || null,\n      isActive: insertTemplate.isActive !== undefined ? insertTemplate.isActive : true\n    };\n    this.templates.set(id, template);\n    return template;\n  }\n\n  async updateTemplate(id: string, updates: Partial<InsertTemplate>): Promise<Template> {\n    const template = this.templates.get(id);\n    if (!template) throw new Error(\"Template not found\");\n    \n    const updatedTemplate = { ...template, ...updates };\n    this.templates.set(id, updatedTemplate);\n    return updatedTemplate;\n  }\n\n  async deleteTemplate(id: string): Promise<void> {\n    const template = this.templates.get(id);\n    if (template) {\n      template.isActive = false;\n      this.templates.set(id, template);\n    }\n  }\n\n  // Broadcast operations\n  async getBroadcasts(): Promise<Broadcast[]> {\n    return Array.from(this.broadcasts.values())\n      .sort((a, b) => (b.createdAt?.getTime() || 0) - (a.createdAt?.getTime() || 0));\n  }\n\n  async getBroadcast(id: string): Promise<Broadcast | undefined> {\n    return this.broadcasts.get(id);\n  }\n\n  async createBroadcast(insertBroadcast: InsertBroadcast): Promise<Broadcast> {\n    const id = randomUUID();\n    const broadcast: Broadcast = { \n      ...insertBroadcast, \n      id, \n      createdAt: new Date(),\n      sentAt: null\n    };\n    this.broadcasts.set(id, broadcast);\n    return broadcast;\n  }\n\n  async updateBroadcast(id: string, updates: Partial<Broadcast>): Promise<void> {\n    const broadcast = this.broadcasts.get(id);\n    if (!broadcast) throw new Error(\"Broadcast not found\");\n    \n    const updatedBroadcast = { ...broadcast, ...updates };\n    this.broadcasts.set(id, updatedBroadcast);\n  }\n\n  // Configuration operations\n  async getAppConfig(userId: string): Promise<AppConfig | undefined> {\n    console.log(\"🔍 Getting config for user:\", userId);\n    const config = this.appConfigs.get(userId);\n    console.log(\"📋 Config found:\", config ? \"yes\" : \"no\", config ? Object.keys(config) : \"none\");\n    return config;\n  }\n\n  async updateAppConfig(userId: string, config: Partial<InsertAppConfig>): Promise<AppConfig> {\n    console.log(\"💾 Updating config for user:\", userId);\n    console.log(\"📝 Config data:\", Object.keys(config));\n    console.log(\"🔍 Access Token being saved:\", config.whatsappAccessToken ? \"YES (length: \" + config.whatsappAccessToken.length + \")\" : \"NO\");\n    const existing = this.appConfigs.get(userId);\n    const now = new Date();\n    \n    const appConfig: AppConfig = {\n      id: existing?.id || randomUUID(),\n      userId,\n      whatsappAccessToken: config.whatsappAccessToken !== undefined ? config.whatsappAccessToken : existing?.whatsappAccessToken || null,\n      whatsappPhoneNumberId: config.whatsappPhoneNumberId !== undefined ? config.whatsappPhoneNumberId : existing?.whatsappPhoneNumberId || null,\n      whatsappBusinessAccountId: config.whatsappBusinessAccountId !== undefined ? config.whatsappBusinessAccountId : existing?.whatsappBusinessAccountId || null,\n      whatsappWebhookVerifyToken: config.whatsappWebhookVerifyToken !== undefined ? config.whatsappWebhookVerifyToken : existing?.whatsappWebhookVerifyToken || null,\n      n8nWebhookUrl: config.n8nWebhookUrl !== undefined ? config.n8nWebhookUrl : existing?.n8nWebhookUrl || null,\n      n8nApiKey: config.n8nApiKey !== undefined ? config.n8nApiKey : existing?.n8nApiKey || null,\n      n8nEnabled: config.n8nEnabled ?? existing?.n8nEnabled ?? false,\n      usePersistentDb: config.usePersistentDb ?? existing?.usePersistentDb ?? false,\n      dbHost: config.dbHost !== undefined ? config.dbHost : existing?.dbHost || null,\n      dbPort: config.dbPort !== undefined ? config.dbPort : existing?.dbPort || null,\n      dbName: config.dbName !== undefined ? config.dbName : existing?.dbName || null,\n      dbUsername: config.dbUsername !== undefined ? config.dbUsername : existing?.dbUsername || null,\n      dbPassword: config.dbPassword !== undefined ? config.dbPassword : existing?.dbPassword || null,\n      cdnType: config.cdnType !== undefined ? config.cdnType : existing?.cdnType || \"none\",\n      bunnyApiKey: config.bunnyApiKey !== undefined ? config.bunnyApiKey : existing?.bunnyApiKey || null,\n      bunnyStorageZone: config.bunnyStorageZone !== undefined ? config.bunnyStorageZone : existing?.bunnyStorageZone || null,\n      bunnyPullZone: config.bunnyPullZone !== undefined ? config.bunnyPullZone : existing?.bunnyPullZone || null,\n      bunnyRegion: config.bunnyRegion !== undefined ? config.bunnyRegion : existing?.bunnyRegion || \"ny\",\n      cdnBaseUrl: config.cdnBaseUrl !== undefined ? config.cdnBaseUrl : existing?.cdnBaseUrl || null,\n      enableLogging: config.enableLogging ?? existing?.enableLogging ?? true,\n      webhookSecret: config.webhookSecret !== undefined ? config.webhookSecret : existing?.webhookSecret || randomUUID(),\n      isConfigured: config.isConfigured ?? (\n        !!(config.whatsappAccessToken || existing?.whatsappAccessToken) && \n        !!(config.whatsappPhoneNumberId || existing?.whatsappPhoneNumberId)\n      ),\n      createdAt: existing?.createdAt || now,\n      updatedAt: now,\n    };\n    \n    this.appConfigs.set(userId, appConfig);\n    console.log(\"✅ Config saved with keys:\", Object.keys(appConfig));\n    console.log(\"🔑 Has access token:\", !!appConfig.whatsappAccessToken);\n    console.log(\"📱 Has phone number ID:\", !!appConfig.whatsappPhoneNumberId);\n    return appConfig;\n  }\n\n  // Webhook log operations\n  async createWebhookLog(log: InsertWebhookLog): Promise<WebhookLog> {\n    const id = randomUUID();\n    const webhookLog: WebhookLog = {\n      ...log,\n      id,\n      timestamp: new Date(),\n    };\n    this.webhookLogs.set(id, webhookLog);\n    return webhookLog;\n  }\n\n  async getWebhookLogs(limit: number = 100): Promise<WebhookLog[]> {\n    return Array.from(this.webhookLogs.values())\n      .sort((a, b) => (b.timestamp?.getTime() || 0) - (a.timestamp?.getTime() || 0))\n      .slice(0, limit);\n  }\n}\n\nimport { db } from \"./db\";\nimport { eq } from \"drizzle-orm\";\n\nexport class DatabaseStorage implements IStorage {\n  // User operations\n  async getUser(id: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.id, id));\n    return user || undefined;\n  }\n\n  async getUserByUsername(username: string): Promise<User | undefined> {\n    console.log(\"🔍 DatabaseStorage: Looking for user:\", username);\n    const [user] = await db.select().from(users).where(eq(users.username, username));\n    console.log(\"👤 DatabaseStorage: User found:\", user ? \"yes\" : \"no\");\n    if (user) {\n      console.log(\"🔑 DatabaseStorage: Password hash length:\", user.password.length);\n    }\n    return user || undefined;\n  }\n\n  async createUser(insertUser: InsertUser): Promise<User> {\n    const [user] = await db\n      .insert(users)\n      .values({ ...insertUser, id: randomUUID(), createdAt: new Date() })\n      .returning();\n    return user;\n  }\n\n  // Contact operations\n  async getContacts(): Promise<Contact[]> {\n    return await db.select().from(contacts);\n  }\n\n  async getContact(id: string): Promise<Contact | undefined> {\n    const [contact] = await db.select().from(contacts).where(eq(contacts.id, id));\n    return contact || undefined;\n  }\n\n  async createContact(insertContact: InsertContact): Promise<Contact> {\n    const [contact] = await db\n      .insert(contacts)\n      .values({ \n        ...insertContact, \n        id: randomUUID(), \n        createdAt: new Date(),\n        group: insertContact.group || \"customer\",\n        email: insertContact.email || null,\n        profileImageUrl: insertContact.profileImageUrl || null,\n        lastContact: insertContact.lastContact || null\n      })\n      .returning();\n    return contact;\n  }\n\n  async updateContact(id: string, updates: Partial<InsertContact>): Promise<Contact> {\n    const [contact] = await db\n      .update(contacts)\n      .set(updates)\n      .where(eq(contacts.id, id))\n      .returning();\n    return contact;\n  }\n\n  async deleteContact(id: string): Promise<void> {\n    await db.delete(contacts).where(eq(contacts.id, id));\n  }\n\n  // Conversation operations\n  async getConversations(): Promise<ConversationWithContact[]> {\n    const result = await db\n      .select({\n        id: conversations.id,\n        contactId: conversations.contactId,\n        lastMessageId: conversations.lastMessageId,\n        unreadCount: conversations.unreadCount,\n        updatedAt: conversations.updatedAt,\n        contact: contacts\n      })\n      .from(conversations)\n      .innerJoin(contacts, eq(conversations.contactId, contacts.id));\n    \n    return result;\n  }\n\n  async getConversation(id: string): Promise<Conversation | undefined> {\n    const [conversation] = await db.select().from(conversations).where(eq(conversations.id, id));\n    return conversation || undefined;\n  }\n\n  async createConversation(contactId: string): Promise<Conversation> {\n    const [conversation] = await db\n      .insert(conversations)\n      .values({\n        id: randomUUID(),\n        contactId,\n        lastMessageId: \"\",\n        unreadCount: 0,\n        updatedAt: new Date(),\n      })\n      .returning();\n    return conversation;\n  }\n\n  async updateConversation(id: string, updates: Partial<Conversation>): Promise<void> {\n    await db\n      .update(conversations)\n      .set(updates)\n      .where(eq(conversations.id, id));\n  }\n\n  // Message operations\n  async getMessages(conversationId: string): Promise<Message[]> {\n    return await db\n      .select()\n      .from(messages)\n      .where(eq(messages.conversationId, conversationId))\n      .orderBy(messages.timestamp);\n  }\n\n  async createMessage(insertMessage: InsertMessage): Promise<Message> {\n    const [message] = await db\n      .insert(messages)\n      .values({ \n        ...insertMessage, \n        id: randomUUID(), \n        timestamp: new Date(),\n        type: insertMessage.type || \"text\",\n        status: insertMessage.status || \"sent\",\n        templateId: insertMessage.templateId || null,\n        metadata: insertMessage.metadata || null\n      })\n      .returning();\n    \n    // Update conversation\n    await this.updateConversation(message.conversationId, {\n      lastMessageId: message.id,\n      updatedAt: new Date(),\n    });\n    \n    return message;\n  }\n\n  async updateMessageStatus(id: string, status: string): Promise<void> {\n    await db\n      .update(messages)\n      .set({ status })\n      .where(eq(messages.id, id));\n  }\n\n  async updateMessageReadStatus(id: string, isRead: boolean, readAt: Date): Promise<void> {\n    await db\n      .update(messages)\n      .set({ \n        isRead,\n        readAt \n      })\n      .where(eq(messages.id, id));\n  }\n\n  // Template operations\n  async getTemplates(): Promise<Template[]> {\n    return await db.select().from(templates).where(eq(templates.isActive, true));\n  }\n\n  async getTemplate(id: string): Promise<Template | undefined> {\n    const [template] = await db.select().from(templates).where(eq(templates.id, id));\n    return template || undefined;\n  }\n\n  async createTemplate(insertTemplate: InsertTemplate): Promise<Template> {\n    const [template] = await db\n      .insert(templates)\n      .values({ \n        ...insertTemplate, \n        id: randomUUID(), \n        createdAt: new Date(),\n        category: insertTemplate.category || \"general\",\n        variables: insertTemplate.variables || null,\n        isActive: insertTemplate.isActive !== undefined ? insertTemplate.isActive : true\n      })\n      .returning();\n    return template;\n  }\n\n  async updateTemplate(id: string, updates: Partial<InsertTemplate>): Promise<Template> {\n    const [template] = await db\n      .update(templates)\n      .set(updates)\n      .where(eq(templates.id, id))\n      .returning();\n    return template;\n  }\n\n  async deleteTemplate(id: string): Promise<void> {\n    await db\n      .update(templates)\n      .set({ isActive: false })\n      .where(eq(templates.id, id));\n  }\n\n  // Broadcast operations\n  async getBroadcasts(): Promise<Broadcast[]> {\n    return await db.select().from(broadcasts).orderBy(broadcasts.createdAt);\n  }\n\n  async getBroadcast(id: string): Promise<Broadcast | undefined> {\n    const [broadcast] = await db.select().from(broadcasts).where(eq(broadcasts.id, id));\n    return broadcast || undefined;\n  }\n\n  async createBroadcast(insertBroadcast: InsertBroadcast): Promise<Broadcast> {\n    const [broadcast] = await db\n      .insert(broadcasts)\n      .values({ \n        ...insertBroadcast, \n        id: randomUUID(), \n        createdAt: new Date(),\n        sentAt: null\n      })\n      .returning();\n    return broadcast;\n  }\n\n  async updateBroadcast(id: string, updates: Partial<Broadcast>): Promise<void> {\n    await db\n      .update(broadcasts)\n      .set(updates)\n      .where(eq(broadcasts.id, id));\n  }\n\n  // Configuration operations\n  async getAppConfig(userId: string): Promise<AppConfig | undefined> {\n    console.log(\"🔍 Getting config from DB for user:\", userId);\n    const [config] = await db.select().from(appConfig).where(eq(appConfig.userId, userId));\n    console.log(\"📋 Config found:\", config ? \"yes\" : \"no\");\n    return config || undefined;\n  }\n\n  async updateAppConfig(userId: string, config: Partial<InsertAppConfig>): Promise<AppConfig> {\n    console.log(\"💾 Updating config in DB for user:\", userId);\n    console.log(\"📝 Config data:\", Object.keys(config));\n    \n    const existing = await this.getAppConfig(userId);\n    const now = new Date();\n    \n    const configData = {\n      id: existing?.id || randomUUID(),\n      userId,\n      whatsappAccessToken: config.whatsappAccessToken !== undefined ? config.whatsappAccessToken : existing?.whatsappAccessToken || null,\n      whatsappPhoneNumberId: config.whatsappPhoneNumberId !== undefined ? config.whatsappPhoneNumberId : existing?.whatsappPhoneNumberId || null,\n      whatsappBusinessAccountId: config.whatsappBusinessAccountId !== undefined ? config.whatsappBusinessAccountId : existing?.whatsappBusinessAccountId || null,\n      whatsappWebhookVerifyToken: config.whatsappWebhookVerifyToken !== undefined ? config.whatsappWebhookVerifyToken : existing?.whatsappWebhookVerifyToken || null,\n      n8nWebhookUrl: config.n8nWebhookUrl !== undefined ? config.n8nWebhookUrl : existing?.n8nWebhookUrl || null,\n      n8nApiKey: config.n8nApiKey !== undefined ? config.n8nApiKey : existing?.n8nApiKey || null,\n      n8nEnabled: config.n8nEnabled ?? existing?.n8nEnabled ?? false,\n      usePersistentDb: config.usePersistentDb ?? existing?.usePersistentDb ?? false,\n      dbHost: config.dbHost !== undefined ? config.dbHost : existing?.dbHost || null,\n      dbPort: config.dbPort !== undefined ? config.dbPort : existing?.dbPort || null,\n      dbName: config.dbName !== undefined ? config.dbName : existing?.dbName || null,\n      dbUsername: config.dbUsername !== undefined ? config.dbUsername : existing?.dbUsername || null,\n      dbPassword: config.dbPassword !== undefined ? config.dbPassword : existing?.dbPassword || null,\n      cdnType: config.cdnType !== undefined ? config.cdnType : existing?.cdnType || \"none\",\n      bunnyApiKey: config.bunnyApiKey !== undefined ? config.bunnyApiKey : existing?.bunnyApiKey || null,\n      bunnyStorageZone: config.bunnyStorageZone !== undefined ? config.bunnyStorageZone : existing?.bunnyStorageZone || null,\n      bunnyPullZone: config.bunnyPullZone !== undefined ? config.bunnyPullZone : existing?.bunnyPullZone || null,\n      bunnyRegion: config.bunnyRegion !== undefined ? config.bunnyRegion : existing?.bunnyRegion || \"ny\",\n      cdnBaseUrl: config.cdnBaseUrl !== undefined ? config.cdnBaseUrl : existing?.cdnBaseUrl || null,\n      enableLogging: config.enableLogging ?? existing?.enableLogging ?? true,\n      webhookSecret: config.webhookSecret !== undefined ? config.webhookSecret : existing?.webhookSecret || randomUUID(),\n      isConfigured: config.isConfigured ?? existing?.isConfigured ?? false,\n      createdAt: existing?.createdAt || now,\n      updatedAt: now,\n    };\n\n    if (existing) {\n      const [updated] = await db\n        .update(appConfig)\n        .set(configData)\n        .where(eq(appConfig.userId, userId))\n        .returning();\n      return updated;\n    } else {\n      const [created] = await db\n        .insert(appConfig)\n        .values(configData)\n        .returning();\n      return created;\n    }\n  }\n\n  // Webhook log operations\n  async createWebhookLog(insertLog: InsertWebhookLog): Promise<WebhookLog> {\n    const [log] = await db\n      .insert(webhookLogs)\n      .values({ \n        ...insertLog, \n        id: randomUUID(), \n        timestamp: new Date()\n      })\n      .returning();\n    return log;\n  }\n\n  async getWebhookLogs(limit = 100): Promise<WebhookLog[]> {\n    return await db\n      .select()\n      .from(webhookLogs)\n      .orderBy(webhookLogs.timestamp)\n      .limit(limit);\n  }\n}\n\nexport const storage = new DatabaseStorage();\n","size_bytes":29047},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"server/whatsapp-api.ts":{"content":"import type { AppConfig } from \"@shared/schema\";\n\nexport interface WhatsAppMessage {\n  messaging_product: string;\n  to: string;\n  type: \"text\" | \"template\" | \"image\" | \"video\" | \"document\";\n  text?: { body: string };\n  template?: {\n    name: string;\n    language: { code: string };\n    components?: Array<{\n      type: string;\n      parameters?: Array<{ type: string; text?: string; image?: { link: string }; video?: { link: string }; document?: { link: string; filename: string } }>;\n    }>;\n  };\n  image?: { \n    link?: string;\n    id?: string;\n    caption?: string;\n  };\n  video?: { \n    link?: string;\n    id?: string;\n    caption?: string;\n  };\n  document?: { \n    link?: string;\n    id?: string;\n    caption?: string;\n    filename?: string;\n  };\n}\n\nexport interface WhatsAppWebhookEntry {\n  id: string;\n  changes: Array<{\n    value: {\n      messaging_product: string;\n      metadata: {\n        display_phone_number: string;\n        phone_number_id: string;\n      };\n      contacts?: Array<{\n        profile: { name: string };\n        wa_id: string;\n      }>;\n      messages?: Array<{\n        from: string;\n        id: string;\n        timestamp: string;\n        text?: { body: string };\n        image?: { \n          mime_type: string;\n          sha256: string;\n          id: string;\n          caption?: string;\n        };\n        video?: { \n          mime_type: string;\n          sha256: string;\n          id: string;\n          caption?: string;\n        };\n        document?: { \n          mime_type: string;\n          sha256: string;\n          id: string;\n          filename: string;\n          caption?: string;\n        };\n        type: string;\n      }>;\n      statuses?: Array<{\n        id: string;\n        status: string;\n        timestamp: string;\n        recipient_id: string;\n      }>;\n    };\n    field: string;\n  }>;\n}\n\nexport class WhatsAppAPIService {\n  private config: AppConfig;\n  private baseUrl = \"https://graph.facebook.com/v18.0\";\n\n  constructor(config: AppConfig) {\n    this.config = config;\n  }\n\n  async sendMessage(message: WhatsAppMessage): Promise<{ success: boolean; messageId?: string; error?: string }> {\n    if (!this.config.whatsappAccessToken || !this.config.whatsappPhoneNumberId) {\n      return { success: false, error: \"WhatsApp credentials not configured\" };\n    }\n\n    console.log(\"📡 Making WhatsApp API request to:\", `${this.baseUrl}/${this.config.whatsappPhoneNumberId}/messages`);\n    console.log(\"📤 Message payload:\", JSON.stringify(message, null, 2));\n\n    try {\n      const response = await fetch(`${this.baseUrl}/${this.config.whatsappPhoneNumberId}/messages`, {\n        method: \"POST\",\n        headers: {\n          \"Authorization\": `Bearer ${this.config.whatsappAccessToken}`,\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify(message),\n      });\n\n      const result = await response.json();\n      console.log(\"📨 WhatsApp API response:\", JSON.stringify(result, null, 2));\n\n      if (response.ok && result.messages?.[0]?.id) {\n        console.log(\"✅ Message sent successfully with ID:\", result.messages[0].id);\n        return { success: true, messageId: result.messages[0].id };\n      } else {\n        console.log(\"❌ WhatsApp API error response:\", result);\n        return { \n          success: false, \n          error: result.error?.message || `HTTP ${response.status}: ${response.statusText}` \n        };\n      }\n    } catch (error) {\n      console.log(\"❌ Network error:\", error);\n      return { \n        success: false, \n        error: error instanceof Error ? error.message : \"Network error\" \n      };\n    }\n  }\n\n  async sendTemplateMessage(\n    to: string, \n    templateName: string, \n    variables: Record<string, string> = {},\n    ctaUrl?: string\n  ): Promise<{ success: boolean; messageId?: string; error?: string }> {\n    const components: Array<any> = [];\n\n    // Add body parameters if variables exist\n    if (Object.keys(variables).length > 0) {\n      components.push({\n        type: \"body\",\n        parameters: Object.values(variables).map(value => ({\n          type: \"text\",\n          text: value\n        }))\n      });\n    }\n\n    // Add CTA URL if provided\n    if (ctaUrl) {\n      components.push({\n        type: \"button\",\n        sub_type: \"url\",\n        index: \"0\",\n        parameters: [{\n          type: \"text\",\n          text: ctaUrl\n        }]\n      });\n    }\n\n    const message: WhatsAppMessage = {\n      messaging_product: \"whatsapp\",\n      to: to.replace(/[^\\d+]/g, \"\"), // Clean phone number\n      type: \"template\",\n      template: {\n        name: templateName.toLowerCase().replace(/[^a-z0-9_]/g, \"_\"),\n        language: { code: \"en_US\" },\n        components: components.length > 0 ? components : undefined\n      }\n    };\n\n    return this.sendMessage(message);\n  }\n\n  async sendTextMessage(to: string, text: string): Promise<{ success: boolean; messageId?: string; error?: string }> {\n    const message: WhatsAppMessage = {\n      messaging_product: \"whatsapp\",\n      to: to.replace(/[^\\d+]/g, \"\"), // Clean phone number\n      type: \"text\",\n      text: { body: text }\n    };\n\n    return this.sendMessage(message);\n  }\n\n  async verifyWebhook(mode: string, token: string, challenge: string): Promise<{ success: boolean; challenge?: string; error?: string }> {\n    if (mode === \"subscribe\" && token === this.config.whatsappWebhookVerifyToken) {\n      return { success: true, challenge };\n    }\n    return { success: false, error: \"Invalid webhook verification\" };\n  }\n\n  parseWebhookPayload(payload: any): {\n    messages: Array<{\n      from: string;\n      messageId: string;\n      text: string;\n      timestamp: Date;\n    }>;\n    statuses: Array<{\n      messageId: string;\n      status: string;\n      timestamp: Date;\n      recipient: string;\n    }>;\n  } {\n    const messages: Array<any> = [];\n    const statuses: Array<any> = [];\n\n    if (payload.entry) {\n      for (const entry of payload.entry) {\n        for (const change of entry.changes || []) {\n          // Process incoming messages\n          if (change.value?.messages) {\n            for (const msg of change.value.messages) {\n              messages.push({\n                from: msg.from,\n                messageId: msg.id,\n                text: msg.text?.body || \"\",\n                timestamp: new Date(parseInt(msg.timestamp) * 1000)\n              });\n            }\n          }\n\n          // Process message statuses\n          if (change.value?.statuses) {\n            for (const status of change.value.statuses) {\n              statuses.push({\n                messageId: status.id,\n                status: status.status,\n                timestamp: new Date(parseInt(status.timestamp) * 1000),\n                recipient: status.recipient_id\n              });\n            }\n          }\n        }\n      }\n    }\n\n    return { messages, statuses };\n  }\n\n  async testConnection(): Promise<{ success: boolean; error?: string }> {\n    if (!this.config.whatsappAccessToken || !this.config.whatsappPhoneNumberId) {\n      return { success: false, error: \"WhatsApp credentials not configured\" };\n    }\n\n    try {\n      const response = await fetch(`${this.baseUrl}/${this.config.whatsappPhoneNumberId}`, {\n        headers: {\n          \"Authorization\": `Bearer ${this.config.whatsappAccessToken}`,\n        },\n      });\n\n      if (response.ok) {\n        return { success: true };\n      } else {\n        const result = await response.json();\n        return { \n          success: false, \n          error: result.error?.message || \"WhatsApp API connection failed\" \n        };\n      }\n    } catch (error) {\n      return { \n        success: false, \n        error: error instanceof Error ? error.message : \"Network error\" \n      };\n    }\n  }\n\n  async syncTemplatesFromFBM(): Promise<{ success: boolean; templates?: any[]; error?: string }> {\n    try {\n      if (!this.config.whatsappAccessToken) {\n        return { success: false, error: \"WhatsApp access token is required\" };\n      }\n\n      console.log(\"📋 Starting template sync from Facebook Business Manager...\");\n\n      // Try multiple methods to get WhatsApp Business Account ID\n      let waBaId = this.config.whatsappBusinessAccountId;\n\n      if (!waBaId) {\n        console.log(\"📋 Attempting to get WABA ID from phone number...\");\n        const phoneResponse = await fetch(`https://graph.facebook.com/v21.0/${this.config.whatsappPhoneNumberId}?fields=whatsapp_business_account_id`, {\n          headers: {\n            \"Authorization\": `Bearer ${this.config.whatsappAccessToken}`,\n          },\n        });\n\n        const phoneData = await phoneResponse.json();\n        console.log(\"📋 Phone API response:\", phoneData);\n        \n        if (phoneResponse.ok) {\n          waBaId = phoneData.whatsapp_business_account_id;\n        } else {\n          console.log(\"📋 Phone API failed, trying alternative methods...\");\n          \n          // Try to get all WhatsApp Business Accounts accessible by this token\n          const wabAccountsResponse = await fetch(`https://graph.facebook.com/v21.0/me/businesses`, {\n            headers: {\n              \"Authorization\": `Bearer ${this.config.whatsappAccessToken}`,\n            },\n          });\n          \n          if (wabAccountsResponse.ok) {\n            const businessesData = await wabAccountsResponse.json();\n            console.log(\"📋 Businesses response:\", businessesData);\n            \n            // If we have businesses, try to find WABA from the first one\n            if (businessesData.data && businessesData.data.length > 0) {\n              const businessId = businessesData.data[0].id;\n              \n              // Get WhatsApp Business Accounts from the business\n              const wabaResponse = await fetch(`https://graph.facebook.com/v21.0/${businessId}?fields=owned_whatsapp_business_accounts`, {\n                headers: {\n                  \"Authorization\": `Bearer ${this.config.whatsappAccessToken}`,\n                },\n              });\n              \n              if (wabaResponse.ok) {\n                const wabaData = await wabaResponse.json();\n                console.log(\"📋 WABA response:\", wabaData);\n                \n                if (wabaData.owned_whatsapp_business_accounts?.data?.length > 0) {\n                  waBaId = wabaData.owned_whatsapp_business_accounts.data[0].id;\n                }\n              }\n            }\n          }\n        }\n      }\n\n      console.log(\"📋 Using WhatsApp Business Account ID:\", waBaId);\n\n      if (!waBaId) {\n        return { \n          success: false, \n          error: \"Could not find WhatsApp Business Account ID. Please add your WhatsApp Business Account ID manually in Settings → WhatsApp Business → Business Account ID field, or ensure your access token has proper permissions.\" \n        };\n      }\n\n      // Fetch message templates from Facebook Business Manager\n      console.log(`📋 Fetching templates from WABA: ${waBaId}`);\n      const templatesResponse = await fetch(`https://graph.facebook.com/v21.0/${waBaId}/message_templates?limit=100&fields=id,name,status,category,language,components`, {\n        headers: {\n          \"Authorization\": `Bearer ${this.config.whatsappAccessToken}`,\n        },\n      });\n\n      const templatesData = await templatesResponse.json();\n\n      if (!templatesResponse.ok) {\n        console.error(\"❌ Failed to fetch templates:\", templatesData);\n        return { success: false, error: templatesData.error?.message || \"Failed to fetch templates\" };\n      }\n\n      const approvedTemplates = templatesData.data?.filter((template: any) => template.status === \"APPROVED\") || [];\n      \n      console.log(`📋 Found ${approvedTemplates.length} approved templates from Facebook Business Manager`);\n      \n      return { success: true, templates: approvedTemplates };\n    } catch (error) {\n      console.error(\"❌ Template sync failed:\", error);\n      return { success: false, error: error instanceof Error ? error.message : \"Unknown error\" };\n    }\n  }\n\n  async uploadMedia(file: Buffer, mimeType: string, filename?: string): Promise<{ success: boolean; mediaId?: string; error?: string }> {\n    if (!this.config.whatsappAccessToken || !this.config.whatsappPhoneNumberId) {\n      return { success: false, error: \"WhatsApp credentials not configured\" };\n    }\n\n    try {\n      const formData = new FormData();\n      const blob = new Blob([file], { type: mimeType });\n      formData.append('file', blob, filename || 'media');\n      formData.append('type', mimeType);\n      formData.append('messaging_product', 'whatsapp');\n\n      const response = await fetch(`${this.baseUrl}/${this.config.whatsappPhoneNumberId}/media`, {\n        method: \"POST\",\n        headers: {\n          \"Authorization\": `Bearer ${this.config.whatsappAccessToken}`,\n        },\n        body: formData,\n      });\n\n      const result = await response.json();\n      console.log(\"📤 Media upload response:\", JSON.stringify(result, null, 2));\n\n      if (response.ok && result.id) {\n        return { success: true, mediaId: result.id };\n      } else {\n        return { success: false, error: result.error?.message || \"Media upload failed\" };\n      }\n    } catch (error) {\n      console.error(\"❌ Media upload failed:\", error);\n      return { success: false, error: error instanceof Error ? error.message : \"Unknown error\" };\n    }\n  }\n\n  async downloadMedia(mediaId: string): Promise<{ success: boolean; mediaUrl?: string; error?: string }> {\n    if (!this.config.whatsappAccessToken) {\n      return { success: false, error: \"WhatsApp credentials not configured\" };\n    }\n\n    try {\n      // First get media URL\n      const response = await fetch(`${this.baseUrl}/${mediaId}`, {\n        headers: {\n          \"Authorization\": `Bearer ${this.config.whatsappAccessToken}`,\n        },\n      });\n\n      const result = await response.json();\n      console.log(\"📥 Media info response:\", JSON.stringify(result, null, 2));\n\n      if (response.ok && result.url) {\n        return { success: true, mediaUrl: result.url };\n      } else {\n        return { success: false, error: result.error?.message || \"Media download failed\" };\n      }\n    } catch (error) {\n      console.error(\"❌ Media download failed:\", error);\n      return { success: false, error: error instanceof Error ? error.message : \"Unknown error\" };\n    }\n  }\n\n  async sendMediaMessage(to: string, mediaType: 'image' | 'video' | 'document', mediaId: string, caption?: string, filename?: string): Promise<{ success: boolean; messageId?: string; error?: string }> {\n    const message: WhatsAppMessage = {\n      messaging_product: 'whatsapp',\n      to,\n      type: mediaType,\n    };\n\n    if (mediaType === 'image') {\n      message.image = { id: mediaId, caption };\n    } else if (mediaType === 'video') {\n      message.video = { id: mediaId, caption };\n    } else if (mediaType === 'document') {\n      message.document = { id: mediaId, caption, filename };\n    }\n\n    return this.sendMessage(message);\n  }\n}","size_bytes":14913},"shared/schema.ts":{"content":"import { sql } from \"drizzle-orm\";\nimport { pgTable, text, varchar, timestamp, boolean, integer, jsonb } from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\nexport const users = pgTable(\"users\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  username: text(\"username\").notNull().unique(),\n  password: text(\"password\").notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const contacts = pgTable(\"contacts\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: text(\"name\").notNull(),\n  phone: text(\"phone\").notNull().unique(),\n  email: text(\"email\"),\n  group: text(\"group\").default(\"customer\"),\n  profileImageUrl: text(\"profile_image_url\"),\n  lastContact: timestamp(\"last_contact\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const conversations = pgTable(\"conversations\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  contactId: varchar(\"contact_id\").references(() => contacts.id).notNull(),\n  lastMessageId: varchar(\"last_message_id\"),\n  unreadCount: integer(\"unread_count\").default(0),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\nexport const messages = pgTable(\"messages\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  conversationId: varchar(\"conversation_id\").references(() => conversations.id).notNull(),\n  contactId: varchar(\"contact_id\").references(() => contacts.id).notNull(),\n  content: text(\"content\").notNull(),\n  type: text(\"type\").default(\"text\"), // text, template, media\n  direction: text(\"direction\").notNull(), // inbound, outbound\n  status: text(\"status\").default(\"sent\"), // sent, delivered, read, failed\n  templateId: varchar(\"template_id\"),\n  metadata: jsonb(\"metadata\"), // For template variables, media info, etc.\n  isRead: boolean(\"is_read\").default(false), // For unread indicators\n  readAt: timestamp(\"read_at\"), // When message was read by customer\n  timestamp: timestamp(\"timestamp\").defaultNow(),\n});\n\nexport const templates = pgTable(\"templates\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: text(\"name\").notNull(),\n  category: text(\"category\").default(\"general\"),\n  content: text(\"content\").notNull(),\n  variables: jsonb(\"variables\"), // Array of variable names\n  isActive: boolean(\"is_active\").default(true),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const broadcasts = pgTable(\"broadcasts\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  templateId: varchar(\"template_id\").references(() => templates.id).notNull(),\n  recipients: jsonb(\"recipients\").notNull(), // Array of contact IDs\n  variables: jsonb(\"variables\"), // Template variable values\n  csvData: jsonb(\"csv_data\"), // CSV upload data for bulk messaging\n  status: text(\"status\").default(\"pending\"), // pending, sending, completed, failed\n  sentCount: integer(\"sent_count\").default(0),\n  deliveredCount: integer(\"delivered_count\").default(0),\n  failedCount: integer(\"failed_count\").default(0),\n  scheduledFor: timestamp(\"scheduled_for\"),\n  sentAt: timestamp(\"sent_at\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const appConfig = pgTable(\"app_config\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").references(() => users.id).notNull(),\n  // WhatsApp Business API Configuration\n  whatsappAccessToken: text(\"whatsapp_access_token\"),\n  whatsappPhoneNumberId: text(\"whatsapp_phone_number_id\"),\n  whatsappBusinessAccountId: text(\"whatsapp_business_account_id\"),\n  whatsappWebhookVerifyToken: text(\"whatsapp_webhook_verify_token\"),\n  // n8n Integration (Optional)\n  n8nWebhookUrl: text(\"n8n_webhook_url\"),\n  n8nApiKey: text(\"n8n_api_key\"),\n  n8nEnabled: boolean(\"n8n_enabled\").default(false),\n  // Database Configuration\n  usePersistentDb: boolean(\"use_persistent_db\").default(false),\n  dbHost: text(\"db_host\"),\n  dbPort: text(\"db_port\"),\n  dbName: text(\"db_name\"),\n  dbUsername: text(\"db_username\"),\n  dbPassword: text(\"db_password\"),\n  // Media/CDN Configuration\n  cdnType: text(\"cdn_type\").default(\"none\"), // none, bunny, aws, cloudinary\n  bunnyApiKey: text(\"bunny_api_key\"),\n  bunnyStorageZone: text(\"bunny_storage_zone\"),\n  bunnyPullZone: text(\"bunny_pull_zone\"),\n  bunnyRegion: text(\"bunny_region\").default(\"ny\"), // ny, la, sg, etc.\n  cdnBaseUrl: text(\"cdn_base_url\"),\n  // System Configuration\n  enableLogging: boolean(\"enable_logging\").default(true),\n  webhookSecret: text(\"webhook_secret\"),\n  isConfigured: boolean(\"is_configured\").default(false),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const webhookLogs = pgTable(\"webhook_logs\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  source: text(\"source\").notNull(), // whatsapp, n8n\n  payload: jsonb(\"payload\").notNull(),\n  status: text(\"status\").default(\"received\"), // received, processed, failed\n  errorMessage: text(\"error_message\"),\n  timestamp: timestamp(\"timestamp\").defaultNow(),\n});\n\n// Insert schemas\nexport const insertUserSchema = createInsertSchema(users).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertContactSchema = createInsertSchema(contacts).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertMessageSchema = createInsertSchema(messages).omit({\n  id: true,\n  timestamp: true,\n});\n\nexport const insertTemplateSchema = createInsertSchema(templates).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertBroadcastSchema = createInsertSchema(broadcasts).omit({\n  id: true,\n  createdAt: true,\n  sentAt: true,\n});\n\nexport const insertAppConfigSchema = createInsertSchema(appConfig).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertWebhookLogSchema = createInsertSchema(webhookLogs).omit({\n  id: true,\n  timestamp: true,\n});\n\n// Types\nexport type User = typeof users.$inferSelect;\nexport type InsertUser = z.infer<typeof insertUserSchema>;\n\nexport type Contact = typeof contacts.$inferSelect;\nexport type InsertContact = z.infer<typeof insertContactSchema>;\n\nexport type Conversation = typeof conversations.$inferSelect;\nexport type ConversationWithContact = Conversation & { contact: Contact };\n\nexport type Message = typeof messages.$inferSelect;\nexport type InsertMessage = z.infer<typeof insertMessageSchema>;\n\nexport type Template = typeof templates.$inferSelect;\nexport type InsertTemplate = z.infer<typeof insertTemplateSchema>;\n\nexport type Broadcast = typeof broadcasts.$inferSelect;\nexport type InsertBroadcast = z.infer<typeof insertBroadcastSchema>;\n\nexport type AppConfig = typeof appConfig.$inferSelect;\nexport type InsertAppConfig = z.infer<typeof insertAppConfigSchema>;\n\nexport type WebhookLog = typeof webhookLogs.$inferSelect;\nexport type InsertWebhookLog = z.infer<typeof insertWebhookLogSchema>;\n","size_bytes":6885},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport { useAuth } from \"@/hooks/use-auth\";\nimport Login from \"@/pages/login\";\nimport Dashboard from \"@/pages/dashboard\";\nimport Settings from \"@/pages/settings\";\nimport NotFound from \"@/pages/not-found\";\n\nfunction Router() {\n  const { isAuthenticated, isLoading } = useAuth();\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center bg-background\">\n        <div className=\"text-center\">\n          <div className=\"w-16 h-16 border-4 border-primary border-t-transparent rounded-full animate-spin mx-auto mb-4\"></div>\n          <p className=\"text-muted-foreground\">Loading...</p>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <Switch>\n      {!isAuthenticated ? (\n        <Route path=\"/\" component={Login} />\n      ) : (\n        <>\n          <Route path=\"/\" component={Dashboard} />\n          <Route path=\"/dashboard\" component={Dashboard} />\n          <Route path=\"/settings\" component={Settings} />\n        </>\n      )}\n      <Route component={NotFound} />\n    </Switch>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <TooltipProvider>\n        <Toaster />\n        <Router />\n      </TooltipProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":1510},"client/src/index.css":{"content":"@import url('https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap');\n@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n:root {\n  --background: hsl(0 0% 100%);\n  --foreground: hsl(210 25% 7.8431%);\n  --card: hsl(180 6.6667% 97.0588%);\n  --card-foreground: hsl(210 25% 7.8431%);\n  --popover: hsl(0 0% 100%);\n  --popover-foreground: hsl(210 25% 7.8431%);\n  --primary: hsl(142 76% 36%);\n  --primary-foreground: hsl(0 0% 100%);\n  --secondary: hsl(210 25% 7.8431%);\n  --secondary-foreground: hsl(0 0% 100%);\n  --muted: hsl(240 1.9608% 90%);\n  --muted-foreground: hsl(210 25% 7.8431%);\n  --accent: hsl(211.5789 51.3514% 92.7451%);\n  --accent-foreground: hsl(142 76% 36%);\n  --destructive: hsl(356.3033 90.5579% 54.3137%);\n  --destructive-foreground: hsl(0 0% 100%);\n  --border: hsl(201.4286 30.4348% 90.9804%);\n  --input: hsl(200 23.0769% 97.4510%);\n  --ring: hsl(142 76% 36%);\n  --chart-1: hsl(142 76% 36%);\n  --chart-2: hsl(159.7826 100% 36.0784%);\n  --chart-3: hsl(42.0290 92.8251% 56.2745%);\n  --chart-4: hsl(147.1429 78.5047% 41.9608%);\n  --chart-5: hsl(341.4894 75.2000% 50.9804%);\n  --sidebar: hsl(180 6.6667% 97.0588%);\n  --sidebar-foreground: hsl(210 25% 7.8431%);\n  --sidebar-primary: hsl(142 76% 36%);\n  --sidebar-primary-foreground: hsl(0 0% 100%);\n  --sidebar-accent: hsl(211.5789 51.3514% 92.7451%);\n  --sidebar-accent-foreground: hsl(142 76% 36%);\n  --sidebar-border: hsl(205.0000 25.0000% 90.5882%);\n  --sidebar-ring: hsl(142 76% 36%);\n  --font-sans: Inter, sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: Menlo, monospace;\n  --radius: 1.3rem;\n  \n  /* WhatsApp specific colors */\n  --whatsapp: hsl(142 76% 36%);\n  --whatsapp-dark: hsl(158 89% 30%);\n  --whatsapp-light: hsl(80 24% 88%);\n  --chat-bg: hsl(49 20% 90%);\n  --received-msg: hsl(0 0% 100%);\n  --sent-msg: hsl(80 24% 88%);\n}\n\n.dark {\n  --background: hsl(0 0% 0%);\n  --foreground: hsl(200 6.6667% 91.1765%);\n  --card: hsl(228 9.8039% 10%);\n  --card-foreground: hsl(0 0% 85.0980%);\n  --popover: hsl(0 0% 0%);\n  --popover-foreground: hsl(200 6.6667% 91.1765%);\n  --primary: hsl(142 76% 36%);\n  --primary-foreground: hsl(0 0% 100%);\n  --secondary: hsl(195.0000 15.3846% 94.9020%);\n  --secondary-foreground: hsl(210 25% 7.8431%);\n  --muted: hsl(0 0% 9.4118%);\n  --muted-foreground: hsl(210 3.3898% 46.2745%);\n  --accent: hsl(205.7143 70% 7.8431%);\n  --accent-foreground: hsl(142 76% 36%);\n  --destructive: hsl(356.3033 90.5579% 54.3137%);\n  --destructive-foreground: hsl(0 0% 100%);\n  --border: hsl(210 5.2632% 14.9020%);\n  --input: hsl(207.6923 27.6596% 18.4314%);\n  --ring: hsl(142 76% 36%);\n  --sidebar: hsl(228 9.8039% 10%);\n  --sidebar-foreground: hsl(0 0% 85.0980%);\n  --sidebar-primary: hsl(142 76% 36%);\n  --sidebar-primary-foreground: hsl(0 0% 100%);\n  --sidebar-accent: hsl(205.7143 70% 7.8431%);\n  --sidebar-accent-foreground: hsl(142 76% 36%);\n  --sidebar-border: hsl(205.7143 15.7895% 26.0784%);\n  --sidebar-ring: hsl(142 76% 36%);\n  \n  /* WhatsApp specific colors for dark mode */\n  --whatsapp: hsl(142 76% 36%);\n  --whatsapp-dark: hsl(158 89% 25%);\n  --whatsapp-light: hsl(80 24% 25%);\n  --chat-bg: hsl(228 9.8039% 8%);\n  --received-msg: hsl(228 9.8039% 12%);\n  --sent-msg: hsl(80 24% 25%);\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n  }\n}\n\n.chat-bg {\n  background: var(--chat-bg);\n  background-image: url('data:image/svg+xml,<svg width=\"100\" height=\"100\" xmlns=\"http://www.w3.org/2000/svg\"><defs><pattern id=\"chat-pattern\" x=\"0\" y=\"0\" width=\"100\" height=\"100\" patternUnits=\"userSpaceOnUse\"><circle cx=\"50\" cy=\"50\" r=\"1\" fill=\"%23ffffff\" opacity=\"0.1\"/></pattern></defs><rect width=\"100\" height=\"100\" fill=\"url(%23chat-pattern)\"/></svg>');\n}\n\n.message-bubble-received {\n  background: var(--received-msg);\n  @apply text-gray-800 shadow-sm;\n}\n\n.message-bubble-sent {\n  background: var(--sent-msg);\n  @apply text-gray-800 shadow-sm;\n}\n\n.whatsapp-green {\n  background: var(--whatsapp);\n  color: white;\n}\n\n.whatsapp-green:hover {\n  background: var(--whatsapp-dark);\n}\n\n.whatsapp-light {\n  background: var(--whatsapp-light);\n}\n","size_bytes":4135},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"client/src/hooks/use-auth.ts":{"content":"import { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\n\nexport function useAuth() {\n  const { data: user, isLoading, error } = useQuery({\n    queryKey: [\"/api/auth/user\"],\n    retry: false,\n  });\n\n  return {\n    user,\n    isLoading,\n    isAuthenticated: !!user && !error,\n  };\n}\n\nexport function useLogin() {\n  const queryClient = useQueryClient();\n  const { toast } = useToast();\n\n  return useMutation({\n    mutationFn: async ({ username, password }: { username: string; password: string }) => {\n      const response = await apiRequest(\"POST\", \"/api/auth/login\", { username, password });\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/auth/user\"] });\n      toast({\n        title: \"Welcome!\",\n        description: \"You have successfully logged in.\",\n      });\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Login Failed\",\n        description: error.message || \"Invalid credentials. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n}\n\nexport function useLogout() {\n  const queryClient = useQueryClient();\n  const { toast } = useToast();\n\n  return useMutation({\n    mutationFn: async () => {\n      await apiRequest(\"POST\", \"/api/auth/logout\");\n    },\n    onSuccess: () => {\n      queryClient.clear();\n      toast({\n        title: \"Logged Out\",\n        description: \"You have been successfully logged out.\",\n      });\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Logout Error\",\n        description: error.message || \"Failed to logout properly.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n}\n","size_bytes":1760},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/hooks/use-websocket.ts":{"content":"import { useEffect, useRef, useCallback } from 'react';\nimport { useQueryClient } from '@tanstack/react-query';\n\ninterface WebSocketMessage {\n  type: string;\n  data: any;\n}\n\nexport function useWebSocket() {\n  const wsRef = useRef<WebSocket | null>(null);\n  const queryClient = useQueryClient();\n  const reconnectTimeoutRef = useRef<NodeJS.Timeout>();\n  const reconnectAttempts = useRef(0);\n  const maxReconnectAttempts = 5;\n\n  const connect = useCallback(() => {\n    if (wsRef.current?.readyState === WebSocket.OPEN) {\n      return;\n    }\n\n    const protocol = window.location.protocol === \"https:\" ? \"wss:\" : \"ws:\";\n    const wsUrl = `${protocol}//${window.location.host}/ws`;\n    \n    try {\n      wsRef.current = new WebSocket(wsUrl);\n\n      wsRef.current.onopen = () => {\n        console.log('WebSocket connected');\n        reconnectAttempts.current = 0;\n      };\n\n      wsRef.current.onmessage = (event) => {\n        try {\n          const message: WebSocketMessage = JSON.parse(event.data);\n          \n          switch (message.type) {\n            case 'new_message':\n              // Invalidate conversations and messages queries\n              queryClient.invalidateQueries({ queryKey: ['/api/conversations'] });\n              if (message.data.conversationId) {\n                queryClient.invalidateQueries({ \n                  queryKey: ['/api/conversations', message.data.conversationId, 'messages'] \n                });\n              }\n              break;\n              \n            case 'message_status_update':\n              // Update specific message status\n              queryClient.invalidateQueries({ queryKey: ['/api/conversations'] });\n              break;\n              \n            default:\n              console.log('Unknown WebSocket message type:', message.type);\n          }\n        } catch (error) {\n          console.error('Error parsing WebSocket message:', error);\n        }\n      };\n\n      wsRef.current.onclose = () => {\n        console.log('WebSocket disconnected');\n        \n        // Attempt to reconnect\n        if (reconnectAttempts.current < maxReconnectAttempts) {\n          reconnectAttempts.current++;\n          const delay = Math.min(1000 * Math.pow(2, reconnectAttempts.current), 30000);\n          \n          reconnectTimeoutRef.current = setTimeout(() => {\n            console.log(`Attempting to reconnect (${reconnectAttempts.current}/${maxReconnectAttempts})...`);\n            connect();\n          }, delay);\n        }\n      };\n\n      wsRef.current.onerror = (error) => {\n        console.error('WebSocket error:', error);\n      };\n    } catch (error) {\n      console.error('Failed to create WebSocket connection:', error);\n    }\n  }, [queryClient]);\n\n  const disconnect = useCallback(() => {\n    if (reconnectTimeoutRef.current) {\n      clearTimeout(reconnectTimeoutRef.current);\n    }\n    \n    if (wsRef.current) {\n      wsRef.current.close();\n      wsRef.current = null;\n    }\n  }, []);\n\n  useEffect(() => {\n    connect();\n\n    return () => {\n      disconnect();\n    };\n  }, [connect, disconnect]);\n\n  return {\n    connect,\n    disconnect,\n    isConnected: wsRef.current?.readyState === WebSocket.OPEN,\n  };\n}\n","size_bytes":3157},"client/src/lib/auth-utils.ts":{"content":"export function isUnauthorizedError(error: Error): boolean {\n  return /^401: .*Unauthorized/.test(error.message);\n}\n","size_bytes":116},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1383},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/dashboard.tsx":{"content":"import { useState } from \"react\";\nimport { useWebSocket } from \"@/hooks/use-websocket\";\nimport SidebarNav from \"@/components/ui/sidebar-nav\";\nimport ChatInterface from \"@/components/chat/chat-interface\";\nimport TemplateManager from \"@/components/templates/template-manager\";\nimport BroadcastComposer from \"@/components/broadcast/broadcast-composer\";\nimport ContactManager from \"@/components/contacts/contact-manager\";\nimport Settings from \"@/pages/settings\";\n\nexport default function Dashboard() {\n  const [activeTab, setActiveTab] = useState(\"chats\");\n  const [selectedConversationId, setSelectedConversationId] = useState<string | null>(null);\n  \n  // Initialize WebSocket connection\n  useWebSocket();\n\n  const renderContent = () => {\n    switch (activeTab) {\n      case \"chats\":\n        return (\n          <ChatInterface \n            selectedConversationId={selectedConversationId}\n            onConversationSelect={setSelectedConversationId}\n          />\n        );\n      case \"templates\":\n        return <TemplateManager />;\n      case \"broadcast\":\n        return <BroadcastComposer />;\n      case \"contacts\":\n        return <ContactManager />;\n      case \"settings\":\n        return <Settings />;\n      default:\n        return <ChatInterface selectedConversationId={selectedConversationId} onConversationSelect={setSelectedConversationId} />;\n    }\n  };\n\n  return (\n    <div className=\"flex h-screen bg-background\">\n      <SidebarNav activeTab={activeTab} onTabChange={setActiveTab} />\n      <div className=\"flex-1 flex flex-col\">\n        {renderContent()}\n      </div>\n    </div>\n  );\n}\n","size_bytes":1593},"client/src/pages/login.tsx":{"content":"import { useState } from \"react\";\nimport { useLogin } from \"@/hooks/use-auth\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\n\nexport default function Login() {\n  const [username, setUsername] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const loginMutation = useLogin();\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    if (username && password) {\n      loginMutation.mutate({ username, password });\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen flex items-center justify-center bg-whatsapp\">\n      <Card className=\"w-full max-w-md mx-4 shadow-2xl\">\n        <CardHeader className=\"text-center space-y-4\">\n          <div className=\"mx-auto\">\n            <i className=\"fab fa-whatsapp text-6xl text-whatsapp\"></i>\n          </div>\n          <CardTitle className=\"text-2xl font-bold text-gray-800\">\n            WhatsApp Business Portal\n          </CardTitle>\n          <CardDescription className=\"text-gray-600\">\n            Secure access to your business communications\n          </CardDescription>\n        </CardHeader>\n        <CardContent>\n          <form onSubmit={handleSubmit} className=\"space-y-6\">\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"username\" className=\"text-sm font-medium text-gray-700\">\n                Username\n              </Label>\n              <Input\n                id=\"username\"\n                type=\"text\"\n                placeholder=\"Enter your username\"\n                value={username}\n                onChange={(e) => setUsername(e.target.value)}\n                required\n                data-testid=\"input-username\"\n                className=\"w-full px-4 py-3\"\n              />\n            </div>\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"password\" className=\"text-sm font-medium text-gray-700\">\n                Password\n              </Label>\n              <Input\n                id=\"password\"\n                type=\"password\"\n                placeholder=\"Enter your password\"\n                value={password}\n                onChange={(e) => setPassword(e.target.value)}\n                required\n                data-testid=\"input-password\"\n                className=\"w-full px-4 py-3\"\n              />\n            </div>\n            <Button\n              type=\"submit\"\n              className=\"w-full whatsapp-green py-3 font-medium\"\n              disabled={loginMutation.isPending}\n              data-testid=\"button-login\"\n            >\n              {loginMutation.isPending ? \"Signing In...\" : \"Sign In\"}\n            </Button>\n          </form>\n          <div className=\"mt-4 text-center text-sm text-gray-600\">\n            <p>Demo credentials: admin / admin123</p>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":2983},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/pages/settings-old.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Switch } from \"@/components/ui/switch\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Alert, AlertDescription } from \"@/components/ui/alert\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\n\ninterface ConfigData {\n  whatsappAccessToken: string;\n  whatsappPhoneNumberId: string;\n  whatsappBusinessAccountId: string;\n  whatsappWebhookVerifyToken: string;\n  n8nWebhookUrl: string;\n  n8nApiKey: string;\n  n8nEnabled: boolean;\n  enableLogging: boolean;\n  webhookSecret: string;\n  isConfigured: boolean;\n}\n\nexport default function Settings() {\n  const [configData, setConfigData] = useState<ConfigData>({\n    whatsappAccessToken: \"\",\n    whatsappPhoneNumberId: \"\",\n    whatsappBusinessAccountId: \"\",\n    whatsappWebhookVerifyToken: \"\",\n    n8nWebhookUrl: \"\",\n    n8nApiKey: \"\",\n    n8nEnabled: false,\n    enableLogging: true,\n    webhookSecret: \"\",\n    isConfigured: false,\n  });\n\n  const [connectionStatus, setConnectionStatus] = useState<{\n    whatsapp: \"unknown\" | \"testing\" | \"success\" | \"failed\";\n    n8n: \"unknown\" | \"testing\" | \"success\" | \"failed\";\n  }>({ whatsapp: \"unknown\", n8n: \"unknown\" });\n\n  const [showTokens, setShowTokens] = useState(false);\n\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const { data: currentConfig, isLoading } = useQuery<ConfigData>({\n    queryKey: [\"/api/settings/config\"],\n  });\n\n  // Update form data when config loads\n  useEffect(() => {\n    if (currentConfig) {\n      setConfigData(currentConfig);\n    }\n  }, [currentConfig]);\n\n  const configMutation = useMutation({\n    mutationFn: async (data: ConfigData) => {\n      const response = await apiRequest(\"POST\", \"/api/settings/config\", data);\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/settings/config\"] });\n      toast({\n        title: \"Configuration saved\",\n        description: \"Your settings have been saved successfully.\",\n      });\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Failed to save configuration\",\n        description: error.message || \"There was an error saving your settings.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const testConnectionMutation = useMutation({\n    mutationFn: async (type: \"n8n\" | \"whatsapp\") => {\n      setConnectionStatus(prev => ({ ...prev, [type]: \"testing\" }));\n      const response = await apiRequest(\"POST\", `/api/settings/test-connection`, { type });\n      return { type, result: await response.json() };\n    },\n    onSuccess: ({ type, result }) => {\n      setConnectionStatus(prev => ({ ...prev, [type]: \"success\" }));\n      toast({\n        title: \"Connection successful\",\n        description: result.message || \"Connection test passed.\",\n      });\n    },\n    onError: (error: Error, { type }) => {\n      setConnectionStatus(prev => ({ ...prev, [type as string]: \"failed\" }));\n      toast({\n        title: \"Connection failed\",\n        description: error.message || \"Connection test failed.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Initialize form data when config loads\n  useState(() => {\n    if (currentConfig) {\n      setConfigData(currentConfig);\n    }\n  });\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    configMutation.mutate(configData);\n  };\n\n  const handleInputChange = (field: keyof ConfigData, value: string | boolean) => {\n    setConfigData(prev => ({ ...prev, [field]: value }));\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"flex items-center justify-center h-full\">\n        <div className=\"text-center\">\n          <div className=\"w-8 h-8 border-2 border-primary border-t-transparent rounded-full animate-spin mx-auto mb-2\"></div>\n          <p className=\"text-muted-foreground\">Loading settings...</p>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"p-6 max-w-4xl mx-auto\">\n      <div className=\"mb-6\">\n        <h2 className=\"text-2xl font-bold text-gray-800\">Settings & Configuration</h2>\n        <p className=\"text-gray-600 mt-1\">Configure your WhatsApp Business API and n8n integration</p>\n      </div>\n\n      <Tabs defaultValue=\"integration\" className=\"space-y-6\">\n        <TabsList className=\"grid w-full grid-cols-3\">\n          <TabsTrigger value=\"integration\">API Integration</TabsTrigger>\n          <TabsTrigger value=\"whatsapp\">WhatsApp Config</TabsTrigger>\n          <TabsTrigger value=\"advanced\">Advanced</TabsTrigger>\n        </TabsList>\n\n        <form onSubmit={handleSubmit}>\n          <TabsContent value=\"integration\" className=\"space-y-6\">\n            <Card>\n              <CardHeader>\n                <CardTitle>n8n Integration</CardTitle>\n                <CardDescription>\n                  Configure your n8n instance for automation workflows\n                </CardDescription>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <div>\n                  <Label htmlFor=\"n8nWebhookUrl\">n8n Webhook URL</Label>\n                  <Input\n                    id=\"n8nWebhookUrl\"\n                    type=\"url\"\n                    value={configData.n8nWebhookUrl}\n                    onChange={(e) => handleInputChange(\"n8nWebhookUrl\", e.target.value)}\n                    placeholder=\"https://your-n8n-instance.com/webhook\"\n                    data-testid=\"input-n8n-webhook-url\"\n                  />\n                  <p className=\"text-sm text-gray-500 mt-1\">\n                    Your n8n webhook endpoint URL (e.g., AWS Lightsail instance)\n                  </p>\n                </div>\n\n                <div>\n                  <Label htmlFor=\"n8nApiKey\">n8n API Key (Optional)</Label>\n                  <Input\n                    id=\"n8nApiKey\"\n                    type=\"password\"\n                    value={configData.n8nApiKey}\n                    onChange={(e) => handleInputChange(\"n8nApiKey\", e.target.value)}\n                    placeholder=\"Your n8n API key for authentication\"\n                    data-testid=\"input-n8n-api-key\"\n                  />\n                </div>\n\n                <div className=\"flex justify-end\">\n                  <Button\n                    type=\"button\"\n                    variant=\"outline\"\n                    onClick={() => testConnectionMutation.mutate(\"n8n\")}\n                    disabled={testConnectionMutation.isPending || !configData.n8nWebhookUrl}\n                    data-testid=\"button-test-n8n\"\n                  >\n                    {testConnectionMutation.isPending ? \"Testing...\" : \"Test n8n Connection\"}\n                  </Button>\n                </div>\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          <TabsContent value=\"whatsapp\" className=\"space-y-6\">\n            <Card>\n              <CardHeader>\n                <CardTitle>WhatsApp Business Cloud API</CardTitle>\n                <CardDescription>\n                  Configure your WhatsApp Business API credentials\n                </CardDescription>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <div>\n                  <Label htmlFor=\"whatsappBusinessApiUrl\">WhatsApp API Base URL</Label>\n                  <Input\n                    id=\"whatsappBusinessApiUrl\"\n                    type=\"url\"\n                    value={configData.whatsappBusinessApiUrl}\n                    onChange={(e) => handleInputChange(\"whatsappBusinessApiUrl\", e.target.value)}\n                    placeholder=\"https://graph.facebook.com/v18.0\"\n                    data-testid=\"input-whatsapp-api-url\"\n                  />\n                </div>\n\n                <div>\n                  <Label htmlFor=\"whatsappAccessToken\">Access Token</Label>\n                  <Input\n                    id=\"whatsappAccessToken\"\n                    type=\"password\"\n                    value={configData.whatsappAccessToken}\n                    onChange={(e) => handleInputChange(\"whatsappAccessToken\", e.target.value)}\n                    placeholder=\"Your permanent WhatsApp access token\"\n                    data-testid=\"input-whatsapp-token\"\n                  />\n                </div>\n\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <div>\n                    <Label htmlFor=\"whatsappPhoneNumberId\">Phone Number ID</Label>\n                    <Input\n                      id=\"whatsappPhoneNumberId\"\n                      value={configData.whatsappPhoneNumberId}\n                      onChange={(e) => handleInputChange(\"whatsappPhoneNumberId\", e.target.value)}\n                      placeholder=\"1234567890123456\"\n                      data-testid=\"input-phone-number-id\"\n                    />\n                  </div>\n                  <div>\n                    <Label htmlFor=\"whatsappBusinessAccountId\">Business Account ID</Label>\n                    <Input\n                      id=\"whatsappBusinessAccountId\"\n                      value={configData.whatsappBusinessAccountId}\n                      onChange={(e) => handleInputChange(\"whatsappBusinessAccountId\", e.target.value)}\n                      placeholder=\"1234567890123456\"\n                      data-testid=\"input-business-account-id\"\n                    />\n                  </div>\n                </div>\n\n                <div className=\"flex justify-end\">\n                  <Button\n                    type=\"button\"\n                    variant=\"outline\"\n                    onClick={() => testConnectionMutation.mutate(\"whatsapp\")}\n                    disabled={testConnectionMutation.isPending || !configData.whatsappAccessToken}\n                    data-testid=\"button-test-whatsapp\"\n                  >\n                    {testConnectionMutation.isPending ? \"Testing...\" : \"Test WhatsApp API\"}\n                  </Button>\n                </div>\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          <TabsContent value=\"advanced\" className=\"space-y-6\">\n            <Card>\n              <CardHeader>\n                <CardTitle>Advanced Settings</CardTitle>\n                <CardDescription>\n                  Additional configuration options\n                </CardDescription>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <div>\n                  <Label htmlFor=\"webhookVerifyToken\">Webhook Verify Token</Label>\n                  <Input\n                    id=\"webhookVerifyToken\"\n                    value={configData.webhookVerifyToken}\n                    onChange={(e) => handleInputChange(\"webhookVerifyToken\", e.target.value)}\n                    placeholder=\"Your webhook verification token\"\n                    data-testid=\"input-verify-token\"\n                  />\n                  <p className=\"text-sm text-gray-500 mt-1\">\n                    Used to verify incoming WhatsApp webhook requests\n                  </p>\n                </div>\n\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <Label htmlFor=\"enableLogging\">Enable Debug Logging</Label>\n                    <p className=\"text-sm text-gray-500 mt-1\">\n                      Log API requests and responses for debugging\n                    </p>\n                  </div>\n                  <Switch\n                    id=\"enableLogging\"\n                    checked={configData.enableLogging}\n                    onCheckedChange={(checked) => handleInputChange(\"enableLogging\", checked)}\n                    data-testid=\"switch-enable-logging\"\n                  />\n                </div>\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          <div className=\"flex justify-end space-x-2 pt-6\">\n            <Button\n              type=\"button\"\n              variant=\"outline\"\n              onClick={() => setConfigData(currentConfig || {\n                n8nWebhookUrl: \"\",\n                n8nApiKey: \"\",\n                whatsappBusinessApiUrl: \"https://graph.facebook.com/v18.0\",\n                whatsappAccessToken: \"\",\n                whatsappPhoneNumberId: \"\",\n                whatsappBusinessAccountId: \"\",\n                enableLogging: true,\n                webhookVerifyToken: \"\",\n              })}\n            >\n              Reset\n            </Button>\n            <Button\n              type=\"submit\"\n              className=\"whatsapp-green\"\n              disabled={configMutation.isPending}\n              data-testid=\"button-save-config\"\n            >\n              {configMutation.isPending ? \"Saving...\" : \"Save Configuration\"}\n            </Button>\n          </div>\n        </form>\n      </Tabs>\n    </div>\n  );\n}","size_bytes":13122},"client/src/pages/settings.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Switch } from \"@/components/ui/switch\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Alert, AlertDescription } from \"@/components/ui/alert\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\n\ninterface ConfigData {\n  whatsappAccessToken: string;\n  whatsappPhoneNumberId: string;\n  whatsappBusinessAccountId: string;\n  whatsappWebhookVerifyToken: string;\n  n8nWebhookUrl: string;\n  n8nApiKey: string;\n  n8nEnabled: boolean;\n  usePersistentDb: boolean;\n  dbHost: string;\n  dbPort: string;\n  dbName: string;\n  dbUsername: string;\n  dbPassword: string;\n  cdnType: string;\n  bunnyApiKey: string;\n  bunnyStorageZone: string;\n  bunnyPullZone: string;\n  bunnyRegion: string;\n  cdnBaseUrl: string;\n  enableLogging: boolean;\n  webhookSecret: string;\n  isConfigured: boolean;\n}\n\nexport default function Settings() {\n  const [configData, setConfigData] = useState<ConfigData>({\n    whatsappAccessToken: \"\",\n    whatsappPhoneNumberId: \"\",\n    whatsappBusinessAccountId: \"\",\n    whatsappWebhookVerifyToken: \"\",\n    n8nWebhookUrl: \"\",\n    n8nApiKey: \"\",\n    n8nEnabled: false,\n    usePersistentDb: false,\n    dbHost: \"\",\n    dbPort: \"\",\n    dbName: \"\",\n    dbUsername: \"\",\n    dbPassword: \"\",\n    cdnType: \"none\",\n    bunnyApiKey: \"\",\n    bunnyStorageZone: \"\",\n    bunnyPullZone: \"\",\n    bunnyRegion: \"ny\",\n    cdnBaseUrl: \"\",\n    enableLogging: true,\n    webhookSecret: \"\",\n    isConfigured: false,\n  });\n\n  const [connectionStatus, setConnectionStatus] = useState<{\n    whatsapp: \"unknown\" | \"testing\" | \"success\" | \"failed\";\n    n8n: \"unknown\" | \"testing\" | \"success\" | \"failed\";\n  }>({ whatsapp: \"unknown\", n8n: \"unknown\" });\n\n  const [showTokens, setShowTokens] = useState(false);\n\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const { data: currentConfig, isLoading } = useQuery<ConfigData>({\n    queryKey: [\"/api/settings/config\"],\n  });\n\n  // Update form data when config loads\n  useEffect(() => {\n    if (currentConfig) {\n      setConfigData(currentConfig);\n    }\n  }, [currentConfig]);\n\n  const configMutation = useMutation({\n    mutationFn: async (data: ConfigData) => {\n      const response = await apiRequest(\"POST\", \"/api/settings/config\", data);\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/settings/config\"] });\n      toast({\n        title: \"Configuration saved\",\n        description: \"Your settings have been saved successfully.\",\n      });\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Failed to save configuration\",\n        description: error.message || \"There was an error saving your settings.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const testConnectionMutation = useMutation({\n    mutationFn: async (type: \"n8n\" | \"whatsapp\") => {\n      setConnectionStatus(prev => ({ ...prev, [type]: \"testing\" }));\n      const response = await apiRequest(\"POST\", `/api/settings/test-connection`, { type });\n      return { type, result: await response.json() };\n    },\n    onSuccess: ({ type, result }) => {\n      setConnectionStatus(prev => ({ ...prev, [type]: \"success\" }));\n      toast({\n        title: \"Connection successful\",\n        description: result.message || \"Connection test passed.\",\n      });\n    },\n    onError: (error: Error, variables) => {\n      const type = (variables as any)?.type || \"unknown\";\n      setConnectionStatus(prev => ({ ...prev, [type]: \"failed\" }));\n      toast({\n        title: \"Connection failed\",\n        description: error.message || \"Connection test failed.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    configMutation.mutate(configData);\n  };\n\n  const handleInputChange = (field: keyof ConfigData, value: string | boolean) => {\n    setConfigData(prev => ({ ...prev, [field]: value }));\n  };\n\n  const getStatusBadge = (status: string) => {\n    switch (status) {\n      case \"success\":\n        return <Badge variant=\"default\" className=\"bg-green-500\">Connected</Badge>;\n      case \"failed\":\n        return <Badge variant=\"destructive\">Failed</Badge>;\n      case \"testing\":\n        return <Badge variant=\"secondary\">Testing...</Badge>;\n      default:\n        return <Badge variant=\"outline\">Unknown</Badge>;\n    }\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"flex items-center justify-center h-full\">\n        <div className=\"text-center\">\n          <div className=\"w-8 h-8 border-2 border-primary border-t-transparent rounded-full animate-spin mx-auto mb-2\"></div>\n          <p className=\"text-muted-foreground\">Loading settings...</p>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"p-6 max-w-6xl mx-auto\">\n      <div className=\"mb-6\">\n        <h1 className=\"text-3xl font-bold text-gray-900\">Settings & Configuration</h1>\n        <p className=\"text-gray-600 mt-2\">Configure your WhatsApp Business integration for production use</p>\n        \n        {configData.isConfigured && (\n          <Alert className=\"mt-4 border-green-200 bg-green-50\">\n            <AlertDescription className=\"text-green-800\">\n              ✓ Your WhatsApp Business API is configured and ready to use. Messages can be sent directly through the application.\n            </AlertDescription>\n          </Alert>\n        )}\n\n        {configData.whatsappPhoneNumberId && !configData.whatsappAccessToken && (\n          <Alert className=\"mt-4 border-red-200 bg-red-50\">\n            <AlertDescription className=\"text-red-800\">\n              ⚠️ Missing WhatsApp Access Token! You have Phone Number ID configured but messages cannot be sent without the Access Token. Please add it in the WhatsApp Business tab.\n            </AlertDescription>\n          </Alert>\n        )}\n      </div>\n\n      <Tabs defaultValue=\"whatsapp\" className=\"space-y-6\">\n        <TabsList className=\"grid w-full grid-cols-5\">\n          <TabsTrigger value=\"whatsapp\">WhatsApp Business</TabsTrigger>\n          <TabsTrigger value=\"media\">Media Server</TabsTrigger>\n          <TabsTrigger value=\"n8n\">n8n Integration</TabsTrigger>\n          <TabsTrigger value=\"webhooks\">Webhooks</TabsTrigger>\n          <TabsTrigger value=\"system\">System</TabsTrigger>\n        </TabsList>\n\n        <form onSubmit={handleSubmit}>\n          <TabsContent value=\"whatsapp\" className=\"space-y-6\">\n            <Card>\n              <CardHeader className=\"pb-4\">\n                <div className=\"flex justify-between items-center\">\n                  <div>\n                    <CardTitle>WhatsApp Business Cloud API</CardTitle>\n                    <CardDescription>\n                      Configure your WhatsApp Business Account to send messages directly\n                    </CardDescription>\n                  </div>\n                  {getStatusBadge(connectionStatus.whatsapp)}\n                </div>\n              </CardHeader>\n              <CardContent className=\"space-y-6\">\n                <div className=\"bg-blue-50 p-4 rounded-lg\">\n                  <h4 className=\"font-medium text-blue-900 mb-2\">Quick Setup Guide:</h4>\n                  <ol className=\"text-sm text-blue-800 space-y-1 list-decimal list-inside\">\n                    <li>Create a Facebook App with WhatsApp Business product</li>\n                    <li>Get your Access Token from the Facebook App dashboard</li>\n                    <li>Find your Phone Number ID in WhatsApp Business Account</li>\n                    <li>Configure webhook verification token</li>\n                    <li>Test the connection below</li>\n                  </ol>\n                </div>\n\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                  <div>\n                    <Label htmlFor=\"whatsappAccessToken\">Access Token *</Label>\n                    <div className=\"flex space-x-2\">\n                      <Input\n                        id=\"whatsappAccessToken\"\n                        type={showTokens ? \"text\" : \"password\"}\n                        value={configData.whatsappAccessToken || \"\"}\n                        onChange={(e) => handleInputChange(\"whatsappAccessToken\", e.target.value)}\n                        placeholder=\"EAAxxxxxxxx...\"\n                        data-testid=\"input-access-token\"\n                        className=\"flex-1\"\n                      />\n                      <Button\n                        type=\"button\"\n                        variant=\"outline\"\n                        size=\"icon\"\n                        onClick={() => setShowTokens(!showTokens)}\n                        data-testid=\"button-toggle-tokens\"\n                      >\n                        <i className={`fas ${showTokens ? \"fa-eye-slash\" : \"fa-eye\"}`} />\n                      </Button>\n                    </div>\n                    <p className=\"text-xs text-gray-500 mt-1\">From your Facebook App dashboard</p>\n                  </div>\n\n                  <div>\n                    <Label htmlFor=\"whatsappPhoneNumberId\">Phone Number ID *</Label>\n                    <Input\n                      id=\"whatsappPhoneNumberId\"\n                      value={configData.whatsappPhoneNumberId || \"\"}\n                      onChange={(e) => handleInputChange(\"whatsappPhoneNumberId\", e.target.value)}\n                      placeholder=\"123456789012345\"\n                      data-testid=\"input-phone-number-id\"\n                    />\n                    <p className=\"text-xs text-blue-600 mt-1\">\n                      📋 From webhook logs, your correct Phone Number ID should be: <strong>776001938919357</strong>\n                    </p>\n                    <p className=\"text-xs text-gray-500 mt-1\">From WhatsApp Business Account</p>\n                  </div>\n\n                  <div>\n                    <Label htmlFor=\"whatsappBusinessAccountId\">Business Account ID</Label>\n                    <Input\n                      id=\"whatsappBusinessAccountId\"\n                      value={configData.whatsappBusinessAccountId || \"\"}\n                      onChange={(e) => handleInputChange(\"whatsappBusinessAccountId\", e.target.value)}\n                      placeholder=\"732324892861637\"\n                      data-testid=\"input-business-account-id\"\n                    />\n                    <p className=\"text-xs text-blue-600 mt-1\">\n                      📋 From webhook logs, your Business Account ID should be: <strong>732324892861637</strong>\n                    </p>\n                    <p className=\"text-xs text-gray-500 mt-1\">Required for template sync from Facebook Business Manager</p>\n                  </div>\n\n                  <div>\n                    <Label htmlFor=\"whatsappWebhookVerifyToken\">Webhook Verify Token</Label>\n                    <Input\n                      id=\"whatsappWebhookVerifyToken\"\n                      value={configData.whatsappWebhookVerifyToken || \"\"}\n                      onChange={(e) => handleInputChange(\"whatsappWebhookVerifyToken\", e.target.value)}\n                      placeholder=\"my_secure_token_123\"\n                      data-testid=\"input-webhook-verify-token\"\n                    />\n                    <p className=\"text-xs text-gray-500 mt-1\">Custom token for webhook security</p>\n                  </div>\n                </div>\n\n                <div className=\"flex justify-between items-center pt-4 border-t\">\n                  <div className=\"text-sm text-gray-600\">\n                    Status: {connectionStatus.whatsapp === \"success\" ? \"✓ Connected\" : \n                            connectionStatus.whatsapp === \"failed\" ? \"✗ Failed\" : \"Not tested\"}\n                  </div>\n                  <Button\n                    type=\"button\"\n                    variant=\"outline\"\n                    onClick={() => testConnectionMutation.mutate(\"whatsapp\")}\n                    disabled={testConnectionMutation.isPending || !configData.whatsappAccessToken || !configData.whatsappPhoneNumberId}\n                    data-testid=\"button-test-whatsapp\"\n                  >\n                    {testConnectionMutation.isPending ? \"Testing...\" : \"Test Connection\"}\n                  </Button>\n                </div>\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          <TabsContent value=\"media\" className=\"space-y-6\">\n            <Card>\n              <CardHeader>\n                <CardTitle>Media Server & CDN Configuration</CardTitle>\n                <CardDescription>\n                  Configure your CDN or media server for WhatsApp media files (images, videos, documents)\n                </CardDescription>\n              </CardHeader>\n              <CardContent className=\"space-y-6\">\n                <div className=\"bg-orange-50 p-4 rounded-lg\">\n                  <h4 className=\"font-medium text-orange-900 mb-2\">Supported CDN Providers:</h4>\n                  <ul className=\"text-sm text-orange-800 space-y-1 list-disc list-inside\">\n                    <li>Bunny CDN - High performance global CDN</li>\n                    <li>AWS S3 + CloudFront - Enterprise solution</li>\n                    <li>Cloudinary - Image and video optimization</li>\n                    <li>Custom CDN - Your own media server</li>\n                  </ul>\n                </div>\n\n                <div className=\"space-y-4\">\n                  <div>\n                    <Label htmlFor=\"cdnType\">CDN Provider</Label>\n                    <select\n                      id=\"cdnType\"\n                      value={configData.cdnType || \"none\"}\n                      onChange={(e) => handleInputChange(\"cdnType\", e.target.value)}\n                      className=\"w-full p-2 border border-gray-300 rounded-md\"\n                      data-testid=\"select-cdn-type\"\n                    >\n                      <option value=\"none\">No CDN (Basic media handling)</option>\n                      <option value=\"bunny\">Bunny CDN</option>\n                      <option value=\"aws\">AWS S3 + CloudFront</option>\n                      <option value=\"cloudinary\">Cloudinary</option>\n                      <option value=\"custom\">Custom CDN</option>\n                    </select>\n                    <p className=\"text-xs text-gray-500 mt-1\">Choose your preferred media hosting provider</p>\n                  </div>\n\n                  {configData.cdnType === \"bunny\" && (\n                    <div className=\"space-y-4 border-l-4 border-orange-200 pl-4 bg-orange-50 p-4 rounded\">\n                      <h4 className=\"font-medium text-orange-900\">Bunny CDN Configuration</h4>\n                      <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                        <div>\n                          <Label htmlFor=\"bunnyApiKey\">API Key</Label>\n                          <Input\n                            id=\"bunnyApiKey\"\n                            type={showTokens ? \"text\" : \"password\"}\n                            value={configData.bunnyApiKey || \"\"}\n                            onChange={(e) => handleInputChange(\"bunnyApiKey\", e.target.value)}\n                            placeholder=\"Your Bunny CDN API key\"\n                            data-testid=\"input-bunny-api-key\"\n                          />\n                        </div>\n                        <div>\n                          <Label htmlFor=\"bunnyStorageZone\">Storage Zone</Label>\n                          <Input\n                            id=\"bunnyStorageZone\"\n                            value={configData.bunnyStorageZone || \"\"}\n                            onChange={(e) => handleInputChange(\"bunnyStorageZone\", e.target.value)}\n                            placeholder=\"your-storage-zone\"\n                            data-testid=\"input-bunny-storage-zone\"\n                          />\n                        </div>\n                        <div>\n                          <Label htmlFor=\"bunnyPullZone\">Pull Zone</Label>\n                          <Input\n                            id=\"bunnyPullZone\"\n                            value={configData.bunnyPullZone || \"\"}\n                            onChange={(e) => handleInputChange(\"bunnyPullZone\", e.target.value)}\n                            placeholder=\"your-pull-zone\"\n                            data-testid=\"input-bunny-pull-zone\"\n                          />\n                        </div>\n                        <div>\n                          <Label htmlFor=\"bunnyRegion\">Region</Label>\n                          <select\n                            id=\"bunnyRegion\"\n                            value={configData.bunnyRegion || \"ny\"}\n                            onChange={(e) => handleInputChange(\"bunnyRegion\", e.target.value)}\n                            className=\"w-full p-2 border border-gray-300 rounded-md\"\n                            data-testid=\"select-bunny-region\"\n                          >\n                            <option value=\"ny\">New York (US East)</option>\n                            <option value=\"la\">Los Angeles (US West)</option>\n                            <option value=\"sg\">Singapore (Asia)</option>\n                            <option value=\"sy\">Sydney (Australia)</option>\n                            <option value=\"br\">São Paulo (Brazil)</option>\n                            <option value=\"de\">Frankfurt (Europe)</option>\n                          </select>\n                        </div>\n                      </div>\n                    </div>\n                  )}\n\n                  {configData.cdnType !== \"none\" && configData.cdnType !== \"bunny\" && (\n                    <div className=\"space-y-4 border-l-4 border-blue-200 pl-4 bg-blue-50 p-4 rounded\">\n                      <h4 className=\"font-medium text-blue-900\">CDN Base URL</h4>\n                      <div>\n                        <Label htmlFor=\"cdnBaseUrl\">Base URL</Label>\n                        <Input\n                          id=\"cdnBaseUrl\"\n                          value={configData.cdnBaseUrl || \"\"}\n                          onChange={(e) => handleInputChange(\"cdnBaseUrl\", e.target.value)}\n                          placeholder=\"https://your-cdn-domain.com\"\n                          data-testid=\"input-cdn-base-url\"\n                        />\n                        <p className=\"text-xs text-gray-500 mt-1\">The base URL for your CDN or media server</p>\n                      </div>\n                    </div>\n                  )}\n                </div>\n\n                <div className=\"bg-green-50 p-4 rounded-lg\">\n                  <h4 className=\"font-medium text-green-900 mb-2\">Media Features:</h4>\n                  <ul className=\"text-sm text-green-800 space-y-1 list-disc list-inside\">\n                    <li>Automatic media upload from WhatsApp webhooks</li>\n                    <li>Image and video preview in chat interface</li>\n                    <li>Optimized media delivery and caching</li>\n                    <li>Thumbnail generation for videos</li>\n                    <li>Download links for documents</li>\n                  </ul>\n                </div>\n\n                <div className=\"flex justify-between items-center pt-4 border-t\">\n                  <div className=\"text-sm text-gray-600\">\n                    CDN Status: {connectionStatus.cdn === \"success\" ? \"✓ Connected\" : \n                               connectionStatus.cdn === \"failed\" ? \"✗ Failed\" : \"Not tested\"}\n                  </div>\n                  <Button\n                    type=\"button\"\n                    variant=\"outline\"\n                    onClick={() => testConnectionMutation.mutate(\"cdn\")}\n                    disabled={testConnectionMutation.isPending || configData.cdnType === \"none\"}\n                    data-testid=\"button-test-cdn\"\n                  >\n                    {testConnectionMutation.isPending ? \"Testing...\" : \"Test CDN Connection\"}\n                  </Button>\n                </div>\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          <TabsContent value=\"n8n\" className=\"space-y-6\">\n            <Card>\n              <CardHeader className=\"pb-4\">\n                <div className=\"flex justify-between items-center\">\n                  <div>\n                    <CardTitle>n8n Integration (Optional)</CardTitle>\n                    <CardDescription>\n                      Connect with n8n for advanced automation workflows\n                    </CardDescription>\n                  </div>\n                  <div className=\"flex items-center space-x-2\">\n                    <Switch\n                      checked={configData.n8nEnabled}\n                      onCheckedChange={(checked) => handleInputChange(\"n8nEnabled\", checked)}\n                      data-testid=\"switch-n8n-enabled\"\n                    />\n                    {getStatusBadge(connectionStatus.n8n)}\n                  </div>\n                </div>\n              </CardHeader>\n              <CardContent className=\"space-y-6\">\n                <div className=\"bg-purple-50 p-4 rounded-lg\">\n                  <h4 className=\"font-medium text-purple-900 mb-2\">n8n Features:</h4>\n                  <ul className=\"text-sm text-purple-800 space-y-1 list-disc list-inside\">\n                    <li>Advanced workflow automation</li>\n                    <li>Multi-step marketing campaigns</li>\n                    <li>External system integrations</li>\n                    <li>Conditional message routing</li>\n                  </ul>\n                </div>\n\n                <div className=\"space-y-4\">\n                  <div>\n                    <Label htmlFor=\"n8nWebhookUrl\">n8n Webhook URL</Label>\n                    <Input\n                      id=\"n8nWebhookUrl\"\n                      value={configData.n8nWebhookUrl || \"\"}\n                      onChange={(e) => handleInputChange(\"n8nWebhookUrl\", e.target.value)}\n                      placeholder=\"https://your-n8n-instance.com/webhook/whatsapp\"\n                      data-testid=\"input-n8n-webhook-url\"\n                      disabled={!configData.n8nEnabled}\n                    />\n                    <p className=\"text-xs text-gray-500 mt-1\">Your n8n webhook endpoint URL</p>\n                  </div>\n\n                  <div>\n                    <Label htmlFor=\"n8nApiKey\">n8n API Key (Optional)</Label>\n                    <Input\n                      id=\"n8nApiKey\"\n                      type={showTokens ? \"text\" : \"password\"}\n                      value={configData.n8nApiKey || \"\"}\n                      onChange={(e) => handleInputChange(\"n8nApiKey\", e.target.value)}\n                      placeholder=\"n8n_api_key_xxx\"\n                      data-testid=\"input-n8n-api-key\"\n                      disabled={!configData.n8nEnabled}\n                    />\n                    <p className=\"text-xs text-gray-500 mt-1\">For advanced n8n API operations</p>\n                  </div>\n                </div>\n\n                <div className=\"flex justify-between items-center pt-4 border-t\">\n                  <div className=\"text-sm text-gray-600\">\n                    Status: {connectionStatus.n8n === \"success\" ? \"✓ Connected\" : \n                            connectionStatus.n8n === \"failed\" ? \"✗ Failed\" : \"Not tested\"}\n                  </div>\n                  <Button\n                    type=\"button\"\n                    variant=\"outline\"\n                    onClick={() => testConnectionMutation.mutate(\"n8n\")}\n                    disabled={testConnectionMutation.isPending || !configData.n8nEnabled || !configData.n8nWebhookUrl}\n                    data-testid=\"button-test-n8n\"\n                  >\n                    {testConnectionMutation.isPending ? \"Testing...\" : \"Test Connection\"}\n                  </Button>\n                </div>\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          <TabsContent value=\"webhooks\" className=\"space-y-6\">\n            <Card>\n              <CardHeader>\n                <CardTitle>Webhook Configuration</CardTitle>\n                <CardDescription>\n                  Webhook endpoints for receiving WhatsApp messages and status updates\n                </CardDescription>\n              </CardHeader>\n              <CardContent className=\"space-y-6\">\n                <div className=\"bg-blue-50 p-4 rounded-lg\">\n                  <h4 className=\"font-medium text-blue-900 mb-2\">Setup Instructions:</h4>\n                  <ol className=\"text-sm text-blue-800 space-y-1 list-decimal list-inside\">\n                    <li>Go to Facebook Developer Console → Your App → WhatsApp → Configuration</li>\n                    <li>Add the webhook URL below to \"Callback URL\"</li>\n                    <li>Use the webhook secret as \"Verify Token\"</li>\n                    <li>Subscribe to \"messages\" webhook field</li>\n                    <li>Click \"Verify and Save\" to complete setup</li>\n                  </ol>\n                </div>\n\n                <div className=\"space-y-4\">\n                  <div>\n                    <Label>Webhook URL (Copy this to Facebook Developer Console)</Label>\n                    <div className=\"flex space-x-2\">\n                      <Input\n                        value={typeof window !== 'undefined' ? `${window.location.origin}/api/webhooks/whatsapp` : ''}\n                        readOnly\n                        className=\"bg-gray-50 font-mono text-sm\"\n                      />\n                      <Button\n                        type=\"button\"\n                        variant=\"outline\"\n                        size=\"icon\"\n                        onClick={() => {\n                          const url = `${window.location.origin}/api/webhooks/whatsapp`;\n                          navigator.clipboard.writeText(url);\n                        }}\n                        data-testid=\"button-copy-webhook-url\"\n                      >\n                        📋\n                      </Button>\n                    </div>\n                  </div>\n\n                  <div>\n                    <Label>Webhook Secret (Use as Verify Token)</Label>\n                    <div className=\"flex space-x-2\">\n                      <Input\n                        value={configData.webhookSecret || \"webhook_verify_token_123\"}\n                        readOnly\n                        className=\"bg-gray-50 font-mono text-sm\"\n                      />\n                      <Button\n                        type=\"button\"\n                        variant=\"outline\"\n                        size=\"icon\"\n                        onClick={() => {\n                          navigator.clipboard.writeText(configData.webhookSecret || \"webhook_verify_token_123\");\n                        }}\n                        data-testid=\"button-copy-webhook-secret\"\n                      >\n                        📋\n                      </Button>\n                    </div>\n                    <p className=\"text-xs text-gray-500 mt-1\">Copy this exact value to the \"Verify Token\" field in Facebook Developer Console</p>\n                  </div>\n                </div>\n\n                <div className=\"bg-amber-50 p-4 rounded-lg\">\n                  <h4 className=\"font-medium text-amber-900 mb-2\">Important Notes:</h4>\n                  <ul className=\"text-sm text-amber-800 space-y-1 list-disc list-inside\">\n                    <li>Your webhook URL must be publicly accessible (not localhost)</li>\n                    <li>Use HTTPS in production (required by WhatsApp)</li>\n                    <li>Webhook secret must match exactly between here and Facebook console</li>\n                    <li>After setup, send a test message to your WhatsApp Business number</li>\n                  </ul>\n                </div>\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          <TabsContent value=\"system\" className=\"space-y-6\">\n            <Card>\n              <CardHeader>\n                <CardTitle>Database Configuration</CardTitle>\n                <CardDescription>\n                  Configure database storage for persistent data\n                </CardDescription>\n              </CardHeader>\n              <CardContent className=\"space-y-6\">\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <Label htmlFor=\"usePersistentDb\">Use PostgreSQL Database</Label>\n                    <p className=\"text-sm text-gray-500\">Enable persistent storage instead of in-memory storage</p>\n                  </div>\n                  <Switch\n                    id=\"usePersistentDb\"\n                    checked={configData.usePersistentDb || false}\n                    onCheckedChange={(checked) => handleInputChange(\"usePersistentDb\", checked)}\n                    data-testid=\"switch-persistent-db\"\n                  />\n                </div>\n\n                {configData.usePersistentDb && (\n                  <div className=\"space-y-4 border-l-4 border-blue-200 pl-4 bg-blue-50 p-4 rounded\">\n                    <h4 className=\"font-medium text-blue-900\">Database Connection Details</h4>\n                    <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                      <div>\n                        <Label htmlFor=\"dbHost\">Host</Label>\n                        <Input\n                          id=\"dbHost\"\n                          value={configData.dbHost || \"\"}\n                          onChange={(e) => handleInputChange(\"dbHost\", e.target.value)}\n                          placeholder=\"localhost or IP address\"\n                          data-testid=\"input-db-host\"\n                        />\n                      </div>\n                      <div>\n                        <Label htmlFor=\"dbPort\">Port</Label>\n                        <Input\n                          id=\"dbPort\"\n                          type=\"number\"\n                          value={configData.dbPort || \"\"}\n                          onChange={(e) => handleInputChange(\"dbPort\", e.target.value)}\n                          placeholder=\"5432\"\n                          data-testid=\"input-db-port\"\n                        />\n                      </div>\n                      <div>\n                        <Label htmlFor=\"dbName\">Database Name</Label>\n                        <Input\n                          id=\"dbName\"\n                          value={configData.dbName || \"\"}\n                          onChange={(e) => handleInputChange(\"dbName\", e.target.value)}\n                          placeholder=\"whatsapp_business\"\n                          data-testid=\"input-db-name\"\n                        />\n                      </div>\n                      <div>\n                        <Label htmlFor=\"dbUsername\">Username</Label>\n                        <Input\n                          id=\"dbUsername\"\n                          value={configData.dbUsername || \"\"}\n                          onChange={(e) => handleInputChange(\"dbUsername\", e.target.value)}\n                          placeholder=\"postgres\"\n                          data-testid=\"input-db-username\"\n                        />\n                      </div>\n                      <div className=\"md:col-span-2\">\n                        <Label htmlFor=\"dbPassword\">Password</Label>\n                        <Input\n                          id=\"dbPassword\"\n                          type=\"password\"\n                          value={configData.dbPassword || \"\"}\n                          onChange={(e) => handleInputChange(\"dbPassword\", e.target.value)}\n                          placeholder=\"Enter database password\"\n                          data-testid=\"input-db-password\"\n                        />\n                      </div>\n                    </div>\n                    <div className=\"bg-amber-50 p-3 rounded border border-amber-200\">\n                      <p className=\"text-xs text-amber-800\">\n                        <strong>Note:</strong> Enabling PostgreSQL will persist all chat conversations, contacts, and settings. \n                        Data will be preserved between sessions and server restarts.\n                      </p>\n                    </div>\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardHeader>\n                <CardTitle>System Configuration</CardTitle>\n                <CardDescription>\n                  General system settings and preferences\n                </CardDescription>\n              </CardHeader>\n              <CardContent className=\"space-y-6\">\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <Label htmlFor=\"enableLogging\">Enable Logging</Label>\n                    <p className=\"text-sm text-gray-500\">Log webhook events and API calls for debugging</p>\n                  </div>\n                  <Switch\n                    id=\"enableLogging\"\n                    checked={configData.enableLogging}\n                    onCheckedChange={(checked) => handleInputChange(\"enableLogging\", checked)}\n                    data-testid=\"switch-enable-logging\"\n                  />\n                </div>\n\n                <div className=\"border-t pt-4\">\n                  <h4 className=\"font-medium mb-2\">System Status</h4>\n                  <div className=\"grid grid-cols-2 gap-4 text-sm\">\n                    <div className=\"flex justify-between\">\n                      <span>WhatsApp API:</span>\n                      <span className={configData.isConfigured ? \"text-green-600\" : \"text-red-600\"}>\n                        {configData.isConfigured ? \"Configured\" : \"Not Configured\"}\n                      </span>\n                    </div>\n                    <div className=\"flex justify-between\">\n                      <span>n8n Integration:</span>\n                      <span className={configData.n8nEnabled ? \"text-blue-600\" : \"text-gray-500\"}>\n                        {configData.n8nEnabled ? \"Enabled\" : \"Disabled\"}\n                      </span>\n                    </div>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          <div className=\"flex justify-end space-x-4 pt-6\">\n            <Button\n              type=\"submit\"\n              disabled={configMutation.isPending}\n              data-testid=\"button-save-config\"\n              className=\"px-8\"\n            >\n              {configMutation.isPending ? \"Saving...\" : \"Save Configuration\"}\n            </Button>\n          </div>\n        </form>\n      </Tabs>\n    </div>\n  );\n}","size_bytes":34760},"client/src/components/broadcast/broadcast-composer.tsx":{"content":"import { useState, useRef } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { Template, Contact, Broadcast } from \"@shared/schema\";\n\nexport default function BroadcastComposer() {\n  const [selectedTemplateId, setSelectedTemplateId] = useState<string>(\"\");\n  const [selectedContacts, setSelectedContacts] = useState<Set<string>>(new Set());\n  const [variables, setVariables] = useState<Record<string, string>>({});\n  const [scheduledFor, setScheduledFor] = useState<string>(\"\");\n  const [isScheduled, setIsScheduled] = useState(false);\n  const [csvData, setCsvData] = useState<any[]>([]);\n  const [isCSVDialogOpen, setIsCSVDialogOpen] = useState(false);\n  const [csvUploadMode, setCSVUploadMode] = useState(false);\n  const fileInputRef = useRef<HTMLInputElement>(null);\n\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const { data: templates = [] } = useQuery<Template[]>({\n    queryKey: [\"/api/templates\"],\n  });\n\n  const { data: contacts = [] } = useQuery<Contact[]>({\n    queryKey: [\"/api/contacts\"],\n  });\n\n  const { data: broadcasts = [] } = useQuery<Broadcast[]>({\n    queryKey: [\"/api/broadcasts\"],\n  });\n\n  const broadcastMutation = useMutation({\n    mutationFn: async (data: any) => {\n      const response = await apiRequest(\"POST\", \"/api/broadcasts\", data);\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/broadcasts\"] });\n      resetForm();\n      toast({\n        title: \"Broadcast sent\",\n        description: \"Your broadcast has been queued for delivery.\",\n      });\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Failed to send broadcast\",\n        description: error.message || \"There was an error sending your broadcast.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const selectedTemplate = templates.find(t => t.id === selectedTemplateId);\n  const templateVariables = (selectedTemplate?.variables && Array.isArray(selectedTemplate.variables)) ? selectedTemplate.variables : [];\n\n  const resetForm = () => {\n    setSelectedTemplateId(\"\");\n    setSelectedContacts(new Set());\n    setVariables({});\n    setScheduledFor(\"\");\n    setIsScheduled(false);\n    setCsvData([]);\n    setCSVUploadMode(false);\n  };\n\n  const handleCSVUpload = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const file = event.target.files?.[0];\n    if (file && file.type === \"text/csv\") {\n      const reader = new FileReader();\n      reader.onload = (e) => {\n        const csv = e.target?.result as string;\n        const lines = csv.split('\\n').filter(line => line.trim());\n        const headers = lines[0].split(',').map(h => h.trim());\n        \n        const data = lines.slice(1).map(line => {\n          const values = line.split(',').map(v => v.trim());\n          const row: any = {};\n          headers.forEach((header, index) => {\n            row[header] = values[index] || \"\";\n          });\n          return row;\n        });\n        \n        setCsvData(data);\n        setCSVUploadMode(true);\n        setIsCSVDialogOpen(false);\n        toast({\n          title: \"CSV uploaded\",\n          description: `Loaded ${data.length} contacts from CSV file.`,\n        });\n      };\n      reader.readAsText(file);\n    } else {\n      toast({\n        title: \"Invalid file\",\n        description: \"Please upload a valid CSV file.\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const handleContactToggle = (contactId: string) => {\n    const newSelected = new Set(selectedContacts);\n    if (newSelected.has(contactId)) {\n      newSelected.delete(contactId);\n    } else {\n      newSelected.add(contactId);\n    }\n    setSelectedContacts(newSelected);\n  };\n\n  const handleSelectAll = () => {\n    if (selectedContacts.size === contacts.length) {\n      setSelectedContacts(new Set());\n    } else {\n      setSelectedContacts(new Set(contacts.map(c => c.id)));\n    }\n  };\n\n  const handleVariableChange = (variable: string, value: string) => {\n    setVariables(prev => ({ ...prev, [variable]: value }));\n  };\n\n  const renderPreview = () => {\n    if (!selectedTemplate) return \"\";\n    \n    let preview = selectedTemplate.content;\n    Object.entries(variables).forEach(([key, value]) => {\n      preview = preview.replace(new RegExp(`\\\\{\\\\{${key}\\\\}\\\\}`, 'g'), value || `{{${key}}}`);\n    });\n    \n    return preview;\n  };\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n\n    if (!selectedTemplateId) {\n      toast({\n        title: \"Template required\",\n        description: \"Please select a template for your broadcast.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    if (!csvUploadMode && selectedContacts.size === 0) {\n      toast({\n        title: \"Recipients required\",\n        description: \"Please select at least one recipient for your broadcast.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    if (csvUploadMode && csvData.length === 0) {\n      toast({\n        title: \"CSV data required\",\n        description: \"Please upload a CSV file with recipient data.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    // Check if all required variables are filled\n    const missingVariables = templateVariables.filter(variable => !variables[variable]?.trim());\n    if (missingVariables.length > 0) {\n      toast({\n        title: \"Missing variables\",\n        description: `Please fill in all template variables: ${missingVariables.join(\", \")}`,\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    const broadcastData = {\n      templateId: selectedTemplateId,\n      recipients: csvUploadMode ? csvData.map((row, index) => `csv-${index}`) : Array.from(selectedContacts),\n      variables: csvUploadMode ? {} : variables,\n      csvData: csvUploadMode ? csvData : null,\n      scheduledFor: isScheduled && scheduledFor ? new Date(scheduledFor) : null,\n    };\n\n    broadcastMutation.mutate(broadcastData);\n  };\n\n  const formatBroadcastTime = (date: Date) => {\n    return new Date(date).toLocaleString(\"en-US\", {\n      month: \"short\",\n      day: \"numeric\",\n      hour: \"numeric\",\n      minute: \"2-digit\",\n      hour12: true,\n    });\n  };\n\n  return (\n    <div className=\"p-6 max-w-6xl mx-auto\">\n      <div className=\"mb-6\">\n        <h2 className=\"text-2xl font-bold text-gray-800\">Bulk Broadcast</h2>\n        <p className=\"text-gray-600 mt-1\">Send template messages to multiple contacts</p>\n      </div>\n\n      <div className=\"grid grid-cols-1 xl:grid-cols-3 gap-6\">\n        {/* Broadcast Composer */}\n        <div className=\"xl:col-span-2\">\n          <Card>\n            <CardHeader>\n              <CardTitle>Compose Broadcast</CardTitle>\n              <CardDescription>Select a template, choose recipients, and send your message</CardDescription>\n            </CardHeader>\n            <CardContent>\n              <form onSubmit={handleSubmit} className=\"space-y-6\">\n                {/* Template Selection */}\n                <div>\n                  <Label htmlFor=\"template\">Select Template</Label>\n                  <Select value={selectedTemplateId} onValueChange={setSelectedTemplateId}>\n                    <SelectTrigger data-testid=\"select-broadcast-template\">\n                      <SelectValue placeholder=\"Choose a template...\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      {templates.map((template) => (\n                        <SelectItem key={template.id} value={template.id}>\n                          {template.name} ({template.category})\n                        </SelectItem>\n                      ))}\n                    </SelectContent>\n                  </Select>\n                </div>\n\n                {/* Template Variables */}\n                {templateVariables.length > 0 && (\n                  <div>\n                    <Label>Template Variables</Label>\n                    <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4 mt-2\">\n                      {templateVariables.map((variable) => (\n                        <div key={variable}>\n                          <Input\n                            placeholder={`{{${variable}}}`}\n                            value={variables[variable] || \"\"}\n                            onChange={(e) => handleVariableChange(variable, e.target.value)}\n                            data-testid={`input-variable-${variable}`}\n                          />\n                        </div>\n                      ))}\n                    </div>\n                  </div>\n                )}\n\n                {/* Recipients */}\n                <div>\n                  <div className=\"flex items-center justify-between mb-3\">\n                    <Label>Recipients</Label>\n                    <div className=\"flex items-center space-x-2\">\n                      {!csvUploadMode && (\n                        <Button\n                          type=\"button\"\n                          variant=\"outline\"\n                          size=\"sm\"\n                          onClick={handleSelectAll}\n                          data-testid=\"button-select-all-contacts\"\n                        >\n                          {selectedContacts.size === contacts.length ? \"Deselect All\" : \"Select All\"}\n                        </Button>\n                      )}\n                      <Dialog open={isCSVDialogOpen} onOpenChange={setIsCSVDialogOpen}>\n                        <DialogTrigger asChild>\n                          <Button type=\"button\" variant=\"outline\" size=\"sm\" data-testid=\"button-upload-csv\">\n                            <i className=\"fas fa-upload mr-2\" />\n                            Upload CSV\n                          </Button>\n                        </DialogTrigger>\n                        <DialogContent>\n                          <DialogHeader>\n                            <DialogTitle>Upload CSV File</DialogTitle>\n                            <DialogDescription>\n                              Upload a CSV file with contact details and template variables. \n                              Required columns: phone. Optional: name, variables (matching template variables), cta_url.\n                            </DialogDescription>\n                          </DialogHeader>\n                          <div className=\"space-y-4\">\n                            <div>\n                              <Label>CSV File</Label>\n                              <Input\n                                type=\"file\"\n                                accept=\".csv\"\n                                onChange={handleCSVUpload}\n                                ref={fileInputRef}\n                                data-testid=\"input-csv-file\"\n                              />\n                              <p className=\"text-sm text-gray-500 mt-1\">\n                                CSV format: phone,name,variable1,variable2,cta_url\n                              </p>\n                            </div>\n                            <div className=\"bg-yellow-50 p-3 rounded-md\">\n                              <h4 className=\"font-medium text-yellow-800 mb-1\">CSV Format Example:</h4>\n                              <code className=\"text-sm text-yellow-700\">\n                                phone,name,customer_name,offer_amount,cta_url<br/>\n                                +1234567890,John Doe,John,25%,https://example.com/offer1<br/>\n                                +0987654321,Jane Smith,Jane,30%,https://example.com/offer2\n                              </code>\n                            </div>\n                          </div>\n                        </DialogContent>\n                      </Dialog>\n                      {csvUploadMode && (\n                        <Button\n                          type=\"button\"\n                          variant=\"outline\"\n                          size=\"sm\"\n                          onClick={() => {\n                            setCsvData([]);\n                            setCSVUploadMode(false);\n                            if (fileInputRef.current) {\n                              fileInputRef.current.value = \"\";\n                            }\n                          }}\n                          data-testid=\"button-clear-csv\"\n                        >\n                          Clear CSV\n                        </Button>\n                      )}\n                      <span className=\"text-sm text-gray-500\">\n                        {csvUploadMode ? `${csvData.length} from CSV` : `${selectedContacts.size} selected`}\n                      </span>\n                    </div>\n                  </div>\n                  \n                  <div className=\"border border-gray-300 rounded-lg p-4 max-h-60 overflow-y-auto\">\n                    {csvUploadMode ? (\n                      csvData.length === 0 ? (\n                        <p className=\"text-gray-500 text-center py-4\">No CSV data loaded</p>\n                      ) : (\n                        <div className=\"space-y-3\">\n                          {csvData.map((row, index) => (\n                            <div key={index} className=\"flex items-center space-x-3\">\n                              <div className=\"flex-1\">\n                                <div className=\"font-medium text-gray-900\">{row.name || 'N/A'}</div>\n                                <div className=\"text-sm text-gray-500\">{row.phone}</div>\n                                {Object.keys(row).filter(key => !['phone', 'name'].includes(key)).map(key => (\n                                  <div key={key} className=\"text-xs text-gray-400\">\n                                    {key}: {row[key]}\n                                  </div>\n                                ))}\n                              </div>\n                            </div>\n                          ))}\n                        </div>\n                      )\n                    ) : (\n                      contacts.length === 0 ? (\n                        <p className=\"text-gray-500 text-center py-4\">No contacts available</p>\n                      ) : (\n                        <div className=\"space-y-3\">\n                          {contacts.map((contact) => (\n                            <div key={contact.id} className=\"flex items-center space-x-3\">\n                              <Checkbox\n                                id={`contact-${contact.id}`}\n                                checked={selectedContacts.has(contact.id)}\n                                onCheckedChange={() => handleContactToggle(contact.id)}\n                                data-testid={`checkbox-contact-${contact.id}`}\n                              />\n                              <img\n                                src={contact.profileImageUrl || \"https://images.unsplash.com/photo-1507003211169-0a1dd7228f2d?ixlib=rb-4.0.3&w=32&h=32&fit=crop&crop=face\"}\n                                alt={contact.name}\n                                className=\"w-8 h-8 rounded-full object-cover\"\n                              />\n                              <div className=\"flex-1\">\n                                <div className=\"font-medium text-gray-900\">{contact.name}</div>\n                                <div className=\"text-sm text-gray-500\">{contact.phone}</div>\n                              </div>\n                              <Badge variant=\"outline\">{contact.group || \"customer\"}</Badge>\n                            </div>\n                          ))}\n                        </div>\n                      )\n                    )}\n                  </div>\n                  \n                  <div className=\"mt-2 text-sm text-gray-600\">\n                    {selectedContacts.size} contacts selected\n                  </div>\n                </div>\n\n                {/* Schedule Options */}\n                <div className=\"space-y-3\">\n                  <div className=\"flex items-center space-x-2\">\n                    <Checkbox\n                      id=\"schedule\"\n                      checked={isScheduled}\n                      onCheckedChange={setIsScheduled}\n                      data-testid=\"checkbox-schedule-broadcast\"\n                    />\n                    <Label htmlFor=\"schedule\">Schedule for later</Label>\n                  </div>\n                  \n                  {isScheduled && (\n                    <Input\n                      type=\"datetime-local\"\n                      value={scheduledFor}\n                      onChange={(e) => setScheduledFor(e.target.value)}\n                      min={new Date().toISOString().slice(0, 16)}\n                      data-testid=\"input-schedule-time\"\n                    />\n                  )}\n                </div>\n\n                {/* Submit Button */}\n                <div className=\"flex justify-end pt-4 border-t\">\n                  <Button\n                    type=\"submit\"\n                    className=\"whatsapp-green\"\n                    disabled={broadcastMutation.isPending}\n                    data-testid=\"button-send-broadcast\"\n                  >\n                    {broadcastMutation.isPending ? (\n                      <>\n                        <div className=\"w-4 h-4 border-2 border-white border-t-transparent rounded-full animate-spin mr-2\" />\n                        Sending...\n                      </>\n                    ) : (\n                      <>\n                        <i className=\"fas fa-paper-plane mr-2\" />\n                        {isScheduled ? \"Schedule Broadcast\" : \"Send Broadcast\"}\n                      </>\n                    )}\n                  </Button>\n                </div>\n              </form>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Preview and History */}\n        <div className=\"space-y-6\">\n          {/* Message Preview */}\n          {selectedTemplate && (\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"text-lg\">Message Preview</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"bg-gray-50 p-4 rounded-lg border\">\n                  <div className=\"message-bubble-sent rounded-lg p-3 max-w-full\">\n                    <p className=\"text-gray-800 whitespace-pre-wrap break-words\">\n                      {renderPreview()}\n                    </p>\n                    <span className=\"text-xs text-gray-500 mt-1 block\">Preview</span>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          )}\n\n          {/* Broadcast History */}\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"text-lg\">Recent Broadcasts</CardTitle>\n            </CardHeader>\n            <CardContent>\n              {broadcasts.length === 0 ? (\n                <p className=\"text-gray-500 text-center py-4\">No broadcasts yet</p>\n              ) : (\n                <div className=\"space-y-3\">\n                  {broadcasts.slice(0, 5).map((broadcast) => {\n                    const template = templates.find(t => t.id === broadcast.templateId);\n                    return (\n                      <div\n                        key={broadcast.id}\n                        className=\"p-3 border rounded-lg\"\n                        data-testid={`broadcast-history-${broadcast.id}`}\n                      >\n                        <div className=\"flex items-center justify-between\">\n                          <div>\n                            <h4 className=\"font-medium text-gray-900\">\n                              {template?.name || \"Unknown Template\"}\n                            </h4>\n                            <div className=\"text-sm text-gray-600\">\n                              {Array.isArray(broadcast.recipients) ? broadcast.recipients.length : 0} recipients •{\" \"}\n                              {formatBroadcastTime(broadcast.createdAt || new Date())}\n                            </div>\n                          </div>\n                          <Badge variant={broadcast.status === \"completed\" ? \"default\" : \"secondary\"}>\n                            {broadcast.status}\n                          </Badge>\n                        </div>\n                        \n                        {broadcast.status === \"completed\" && (\n                          <div className=\"mt-2 text-sm text-gray-600\">\n                            <span className=\"text-green-600\">\n                              {broadcast.deliveredCount || 0} delivered\n                            </span>\n                            {(broadcast.failedCount || 0) > 0 && (\n                              <span className=\"text-red-600 ml-2\">\n                                {broadcast.failedCount} failed\n                              </span>\n                            )}\n                          </div>\n                        )}\n                      </div>\n                    );\n                  })}\n                </div>\n              )}\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":21635},"client/src/components/chat/chat-interface.tsx":{"content":"import { useState, useRef } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport ChatList from \"./chat-list\";\nimport MessageBubble from \"./message-bubble\";\nimport TemplateVariableDialog from \"@/components/chat/template-variable-dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { Message, ConversationWithContact, Template } from \"@shared/schema\";\n\ninterface ChatInterfaceProps {\n  selectedConversationId: string | null;\n  onConversationSelect: (id: string) => void;\n}\n\nexport default function ChatInterface({ selectedConversationId, onConversationSelect }: ChatInterfaceProps) {\n  const [messageText, setMessageText] = useState(\"\");\n  const [isSending, setIsSending] = useState(false);\n  const [showTemplateSelector, setShowTemplateSelector] = useState(false);\n  const [selectedTemplate, setSelectedTemplate] = useState<Template | null>(null);\n  const [showVariableDialog, setShowVariableDialog] = useState(false);\n  const fileInputRef = useRef<HTMLInputElement>(null);\n  const { toast } = useToast();\n\n  const { data: conversations = [] } = useQuery<ConversationWithContact[]>({\n    queryKey: [\"/api/conversations\"],\n  });\n\n  const { data: messages = [], isLoading: messagesLoading } = useQuery<Message[]>({\n    queryKey: [\"/api/conversations\", selectedConversationId, \"messages\"],\n    enabled: !!selectedConversationId,\n  });\n\n  const { data: templates = [] } = useQuery<Template[]>({\n    queryKey: [\"/api/templates\"],\n  });\n\n  const selectedConversation = conversations.find(c => c.id === selectedConversationId);\n\n  const handleSendMessage = async () => {\n    if (!messageText.trim() || !selectedConversationId || isSending) return;\n\n    setIsSending(true);\n    try {\n      await apiRequest(\"POST\", \"/api/messages\", {\n        conversationId: selectedConversationId,\n        contactId: selectedConversation?.contactId,\n        content: messageText,\n        type: \"text\",\n        direction: \"outbound\",\n        status: \"sent\",\n        templateId: null,\n        metadata: null,\n      });\n\n      setMessageText(\"\");\n      // Subtle success feedback - message status will show in bubble\n    } catch (error) {\n      toast({\n        title: \"Failed to send message\",\n        description: \"There was an error sending your message. Please try again.\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setIsSending(false);\n    }\n  };\n\n  const handleKeyPress = (e: React.KeyboardEvent) => {\n    if (e.key === \"Enter\" && !e.shiftKey) {\n      e.preventDefault();\n      handleSendMessage();\n    }\n  };\n\n  const handleFileUpload = () => {\n    fileInputRef.current?.click();\n  };\n\n  const handleFileChange = async (e: React.ChangeEvent<HTMLInputElement>) => {\n    const file = e.target.files?.[0];\n    if (!file || !selectedConversationId) return;\n\n    // Check file type and size\n    const maxSize = 100 * 1024 * 1024; // 100MB limit\n    if (file.size > maxSize) {\n      toast({\n        title: \"File too large\",\n        description: \"Please select a file smaller than 100MB.\",\n        variant: \"destructive\"\n      });\n      return;\n    }\n\n    const allowedTypes = ['image/jpeg', 'image/jpg', 'image/png', 'image/gif', 'video/mp4', 'video/mov', 'application/pdf', 'application/msword', 'application/vnd.openxmlformats-officedocument.wordprocessingml.document'];\n    if (!allowedTypes.includes(file.type)) {\n      toast({\n        title: \"Unsupported file type\",\n        description: \"Please select an image, video, or document file.\",\n        variant: \"destructive\"\n      });\n      return;\n    }\n\n    setIsSending(true);\n    try {\n      // Convert file to base64\n      const base64 = await new Promise<string>((resolve, reject) => {\n        const reader = new FileReader();\n        reader.onload = () => {\n          const result = reader.result as string;\n          resolve(result.split(',')[1]); // Remove data:mime;base64, prefix\n        };\n        reader.onerror = reject;\n        reader.readAsDataURL(file);\n      });\n\n      // Determine media type\n      let mediaType = 'document';\n      if (file.type.startsWith('image/')) {\n        mediaType = 'image';\n      } else if (file.type.startsWith('video/')) {\n        mediaType = 'video';\n      }\n\n      // Send media message\n      await apiRequest(\"POST\", \"/api/messages/media\", {\n        conversationId: selectedConversationId,\n        contactId: selectedConversation?.contactId,\n        mediaType: file.type,\n        mediaData: base64,\n        filename: file.name,\n        caption: \"\",\n      });\n\n      toast({\n        title: \"Media sent\",\n        description: `${file.name} sent successfully!`,\n      });\n    } catch (error) {\n      toast({\n        title: \"Failed to send media\",\n        description: \"There was an error sending your file. Please try again.\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setIsSending(false);\n      // Reset file input\n      if (fileInputRef.current) {\n        fileInputRef.current.value = '';\n      }\n    }\n  };\n\n  const handleSendTemplate = async (templateId: string) => {\n    if (!selectedConversationId || isSending) return;\n\n    const template = templates.find(t => t.id === templateId);\n    if (!template) {\n      toast({\n        title: \"Template not found\",\n        description: \"Please select a valid template.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    // Check if template has variables\n    const templateVariables = template.variables && Array.isArray(template.variables) ? template.variables as string[] : [];\n    \n    if (templateVariables.length > 0) {\n      // Show variable input dialog\n      setSelectedTemplate(template);\n      setShowVariableDialog(true);\n      setShowTemplateSelector(false);\n      return;\n    }\n\n    // Send template without variables\n    setIsSending(true);\n    try {\n      await apiRequest(\"POST\", \"/api/messages/template\", {\n        conversationId: selectedConversationId,\n        contactId: selectedConversation?.contactId,\n        templateId: templateId,\n      });\n\n      setShowTemplateSelector(false);\n    } catch (error) {\n      toast({\n        title: \"Failed to send template\",\n        description: \"Please try again.\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setIsSending(false);\n    }\n  };\n\n  const handleSendTemplateWithVariables = async (variables: Record<string, string>) => {\n    if (!selectedConversationId || !selectedTemplate || isSending) return;\n\n    setIsSending(true);\n    try {\n      await apiRequest(\"POST\", \"/api/messages/template-with-variables\", {\n        conversationId: selectedConversationId,\n        contactId: selectedConversation?.contactId,\n        templateId: selectedTemplate.id,\n        variables: variables,\n      });\n\n      setShowVariableDialog(false);\n      setSelectedTemplate(null);\n    } catch (error) {\n      toast({\n        title: \"Failed to send template\",\n        description: \"Please try again.\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setIsSending(false);\n    }\n  };\n\n  return (\n    <div className=\"flex h-full bg-gray-100\">\n      {/* Chat List Panel - Left Side */}\n      <div className=\"w-80 bg-white border-r border-gray-200 flex flex-col\">\n        <div className=\"bg-whatsapp text-white p-4 border-b border-gray-200\">\n          <div className=\"flex items-center justify-between mb-4\">\n            <h2 className=\"text-xl font-semibold text-white\">Conversations</h2>\n            <Button variant=\"ghost\" size=\"icon\" className=\"text-white hover:bg-green-600\">\n              <i className=\"fas fa-search\" />\n            </Button>\n          </div>\n          <div className=\"relative\">\n            <Input\n              type=\"text\"\n              placeholder=\"Search conversations...\"\n              className=\"w-full pl-10\"\n              data-testid=\"input-search-conversations\"\n            />\n            <i className=\"fas fa-search absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400\" />\n          </div>\n        </div>\n\n        <div className=\"flex-1 overflow-y-auto\">\n          <ChatList\n            conversations={conversations}\n            selectedConversationId={selectedConversationId}\n            onConversationSelect={onConversationSelect}\n          />\n        </div>\n      </div>\n\n      {/* Main Chat Area */}\n      <div className=\"flex-1 flex flex-col\">\n        {selectedConversation ? (\n          <>\n            {/* Chat Header */}\n            <div className=\"bg-gray-50 p-4 border-b border-gray-200 flex items-center justify-between\">\n              <div className=\"flex items-center space-x-3\">\n                <div className=\"w-10 h-10 rounded-full bg-gradient-to-br from-green-400 to-green-600 flex items-center justify-center text-white shadow-md\">\n                  <span className=\"text-sm font-medium\">\n                    {selectedConversation.contact.name.charAt(0).toUpperCase()}\n                  </span>\n                </div>\n                <div>\n                  <h3 className=\"font-medium text-gray-900\" data-testid=\"text-contact-name\">\n                    {selectedConversation.contact.name}\n                  </h3>\n                  <p className=\"text-xs text-gray-500\">{selectedConversation.contact.phone}</p>\n                </div>\n              </div>\n              <div className=\"flex items-center space-x-2\">\n                <Button variant=\"ghost\" size=\"icon\" className=\"text-gray-600\">\n                  <i className=\"fas fa-ellipsis-v\" />\n                </Button>\n              </div>\n            </div>\n\n            {/* Messages Area */}\n            <div className=\"flex-1 overflow-y-auto p-4 chat-bg\">\n              {messagesLoading ? (\n                <div className=\"flex justify-center items-center h-full\">\n                  <div className=\"text-gray-500\">Loading messages...</div>\n                </div>\n              ) : messages.length === 0 ? (\n                <div className=\"flex justify-center items-center h-full\">\n                  <div className=\"text-gray-500\">No messages yet. Start a conversation!</div>\n                </div>\n              ) : (\n                <div className=\"space-y-4\">\n                  {messages.map((message) => (\n                    <MessageBubble key={message.id} message={message} />\n                  ))}\n                </div>\n              )}\n            </div>\n\n            {/* Message Input */}\n            <div className=\"bg-white p-4 border-t border-gray-200\">\n              <div className=\"flex items-center space-x-3\">\n                <Button \n                  variant=\"ghost\" \n                  size=\"icon\" \n                  className=\"text-gray-600 hover:text-green-600\"\n                  onClick={handleFileUpload}\n                  data-testid=\"button-upload-file\"\n                >\n                  <i className=\"fas fa-paperclip\" />\n                </Button>\n                <input\n                  type=\"file\"\n                  ref={fileInputRef}\n                  onChange={handleFileChange}\n                  style={{ display: 'none' }}\n                  accept=\"image/*,video/*,audio/*,.pdf,.doc,.docx\"\n                />\n                \n                {showTemplateSelector ? (\n                  <div className=\"relative\">\n                    <Button \n                      variant=\"ghost\" \n                      size=\"icon\" \n                      className=\"text-green-600 bg-green-50\" \n                      onClick={() => setShowTemplateSelector(false)}\n                      data-testid=\"button-template-close\"\n                    >\n                      <i className=\"fas fa-times\" />\n                    </Button>\n                    <div className=\"absolute bottom-full left-0 mb-2 w-80 bg-white border rounded-lg shadow-lg p-3 z-50\">\n                      <div className=\"space-y-3\">\n                        <h4 className=\"font-medium text-sm\">Send Template Message</h4>\n                        {templates.length === 0 ? (\n                          <p className=\"text-sm text-gray-500\">No templates available. Sync templates from Facebook Business Manager.</p>\n                        ) : (\n                          <div className=\"space-y-2 max-h-40 overflow-y-auto\">\n                            {templates.map((template) => (\n                              <Button\n                                key={template.id}\n                                variant=\"outline\"\n                                size=\"sm\"\n                                className=\"w-full justify-start text-left\"\n                                onClick={() => handleSendTemplate(template.id)}\n                                disabled={isSending}\n                              >\n                                <div>\n                                  <div className=\"font-medium\">{template.name}</div>\n                                  <div className=\"text-xs text-gray-500 truncate\">\n                                    {template.content.substring(0, 50)}...\n                                  </div>\n                                </div>\n                              </Button>\n                            ))}\n                          </div>\n                        )}\n                      </div>\n                    </div>\n                  </div>\n                ) : (\n                  <Button \n                    variant=\"ghost\" \n                    size=\"icon\" \n                    className=\"text-gray-600 hover:text-green-600\" \n                    onClick={() => setShowTemplateSelector(true)}\n                    data-testid=\"button-template\"\n                  >\n                    <i className=\"fas fa-file-alt\" />\n                  </Button>\n                )}\n                \n                <div className=\"flex-1 relative\">\n                  <Input\n                    type=\"text\"\n                    placeholder=\"Type a message...\"\n                    value={messageText}\n                    onChange={(e) => setMessageText(e.target.value)}\n                    onKeyPress={handleKeyPress}\n                    className=\"w-full pl-4 pr-12 py-3 rounded-full\"\n                    data-testid=\"input-message\"\n                  />\n                  <Button\n                    size=\"icon\"\n                    className=\"absolute right-2 top-1/2 transform -translate-y-1/2 rounded-full whatsapp-green\"\n                    onClick={handleSendMessage}\n                    disabled={!messageText.trim() || isSending}\n                    data-testid=\"button-send-message\"\n                  >\n                    <i className=\"fas fa-paper-plane\" />\n                  </Button>\n                </div>\n              </div>\n            </div>\n          </>\n        ) : (\n          <div className=\"flex-1 flex items-center justify-center\">\n            <div className=\"text-center text-gray-500\">\n              <i className=\"fas fa-comments text-6xl mb-4 text-gray-300\" />\n              <h3 className=\"text-xl font-medium mb-2\">Welcome to WhatsApp Business</h3>\n              <p>Select a conversation to start messaging</p>\n            </div>\n          </div>\n        )}\n      </div>\n\n      {/* Template Variable Dialog */}\n      {selectedTemplate && (\n        <TemplateVariableDialog\n          template={selectedTemplate}\n          isOpen={showVariableDialog}\n          onClose={() => setShowVariableDialog(false)}\n          onSend={handleSendTemplateWithVariables}\n          isSending={isSending}\n        />\n      )}\n    </div>\n  );\n}\n","size_bytes":15592},"client/src/components/chat/chat-list.tsx":{"content":"import { ConversationWithContact } from \"@shared/schema\";\nimport { cn } from \"@/lib/utils\";\n\ninterface ChatListProps {\n  conversations: ConversationWithContact[];\n  selectedConversationId: string | null;\n  onConversationSelect: (id: string) => void;\n}\n\nexport default function ChatList({ conversations, selectedConversationId, onConversationSelect }: ChatListProps) {\n  const formatTime = (date: Date) => {\n    const now = new Date();\n    const messageDate = new Date(date);\n    const diffMs = now.getTime() - messageDate.getTime();\n    const diffHours = diffMs / (1000 * 60 * 60);\n    const diffDays = diffMs / (1000 * 60 * 60 * 24);\n\n    if (diffHours < 1) {\n      return \"now\";\n    } else if (diffHours < 24) {\n      return messageDate.toLocaleTimeString(\"en-US\", {\n        hour: \"numeric\",\n        minute: \"2-digit\",\n        hour12: true,\n      });\n    } else if (diffDays < 7) {\n      return messageDate.toLocaleDateString(\"en-US\", { weekday: \"short\" });\n    } else {\n      return messageDate.toLocaleDateString(\"en-US\", {\n        month: \"short\",\n        day: \"numeric\",\n      });\n    }\n  };\n\n  return (\n    <div className=\"divide-y divide-gray-100\">\n      {conversations.length === 0 ? (\n        <div className=\"p-8 text-center text-gray-500\">\n          <i className=\"fas fa-inbox text-4xl mb-3 text-gray-300\" />\n          <p>No conversations yet</p>\n        </div>\n      ) : (\n        conversations.map((conversation) => (\n          <div\n            key={conversation.id}\n            className={cn(\n              \"p-4 hover:bg-gray-50 cursor-pointer transition-colors\",\n              selectedConversationId === conversation.id && \"bg-gray-100\"\n            )}\n            onClick={() => onConversationSelect(conversation.id)}\n            data-testid={`chat-item-${conversation.id}`}\n          >\n            <div className=\"flex items-center space-x-3\">\n              <img\n                src={conversation.contact.profileImageUrl || \"https://images.unsplash.com/photo-1507003211169-0a1dd7228f2d?ixlib=rb-4.0.3&w=48&h=48&fit=crop&crop=face\"}\n                alt={`${conversation.contact.name} profile`}\n                className=\"w-12 h-12 rounded-full object-cover\"\n              />\n              <div className=\"flex-1 min-w-0\">\n                <div className=\"flex items-center justify-between\">\n                  <h3 className=\"font-medium text-gray-900 truncate\" data-testid={`text-contact-name-${conversation.id}`}>\n                    {conversation.contact.name}\n                  </h3>\n                  <span className=\"text-xs text-gray-500\">\n                    {formatTime(conversation.updatedAt || new Date())}\n                  </span>\n                </div>\n                <div className=\"flex items-center justify-between mt-1\">\n                  <p className=\"text-sm text-gray-600 truncate\">\n                    {conversation.contact.phone}\n                  </p>\n                  {(conversation.unreadCount || 0) > 0 && (\n                    <span className=\"bg-whatsapp text-white text-xs rounded-full px-2 py-1 min-w-[1.25rem] text-center\">\n                      {conversation.unreadCount}\n                    </span>\n                  )}\n                </div>\n              </div>\n            </div>\n          </div>\n        ))\n      )}\n    </div>\n  );\n}\n","size_bytes":3285},"client/src/components/chat/message-bubble.tsx":{"content":"import { Message } from \"@shared/schema\";\nimport { cn } from \"@/lib/utils\";\nimport { CheckIcon, CheckCheckIcon, ClockIcon, XCircleIcon } from \"lucide-react\";\n\ninterface MessageBubbleProps {\n  message: Message;\n}\n\ninterface MessageMetadata {\n  mediaType?: string;\n  filename?: string;\n  caption?: string;\n  mediaUrl?: string;\n  thumbnailUrl?: string;\n  variables?: Record<string, any>;\n  attachment?: {\n    name?: string;\n    type?: string;\n    size?: string;\n  };\n}\n\nexport default function MessageBubble({ message }: MessageBubbleProps) {\n  const isOutbound = message.direction === \"outbound\";\n  const isTemplate = message.type === \"template\";\n\n  const formatTime = (date: Date) => {\n    return new Date(date).toLocaleTimeString(\"en-US\", {\n      hour: \"numeric\",\n      minute: \"2-digit\",\n      hour12: true,\n    });\n  };\n\n  const getStatusIcon = () => {\n    switch (message.status) {\n      case \"sent\":\n        return <CheckIcon className=\"w-3 h-3 text-gray-400\" title=\"Sent\" />;\n      case \"delivered\":\n        return <CheckCheckIcon className=\"w-3 h-3 text-gray-500\" title=\"Delivered\" />;\n      case \"read\":\n        return <CheckCheckIcon className=\"w-3 h-3 text-blue-500\" title=\"Read\" />;\n      case \"failed\":\n        return <XCircleIcon className=\"w-3 h-3 text-red-500\" title=\"Failed to send\" />;\n      default:\n        return <ClockIcon className=\"w-3 h-3 text-gray-300\" title=\"Sending...\" />;\n    }\n  };\n\n  const metadata = message.metadata as MessageMetadata | null;\n\n  return (\n    <div className={cn(\"flex mb-4\", isOutbound ? \"justify-end\" : \"justify-start\")}>\n      <div className={cn(\"flex items-start space-x-2\", isOutbound ? \"max-w-md\" : \"max-w-xs\")}>\n        <div\n          className={cn(\n            \"rounded-lg p-3 shadow-sm\",\n            isOutbound\n              ? \"message-bubble-sent\"\n              : \"message-bubble-received\",\n            isTemplate && isOutbound && \"border-l-4 border-whatsapp\"\n          )}\n          data-testid={`message-${message.id}`}\n        >\n          {isTemplate && isOutbound && (\n            <div className=\"text-xs text-whatsapp-dark font-medium mb-1\">\n              Template Message\n            </div>\n          )}\n          \n          <p className=\"text-gray-800 whitespace-pre-wrap break-words\">\n            {message.content}\n          </p>\n          \n          {/* Media content */}\n          {metadata?.mediaUrl && (\n            <div className=\"mt-2\">\n              {metadata.mediaType?.startsWith('image/') ? (\n                <div className=\"rounded-lg overflow-hidden\">\n                  <img\n                    src={metadata.mediaUrl}\n                    alt={metadata.filename || 'Image'}\n                    className=\"max-w-full h-auto max-h-64 object-cover cursor-pointer hover:opacity-90 transition-opacity\"\n                    onClick={() => window.open(metadata.mediaUrl, '_blank')}\n                    onError={(e) => {\n                      const target = e.target as HTMLImageElement;\n                      target.style.display = 'none';\n                      const parent = target.parentElement;\n                      if (parent) {\n                        parent.innerHTML = `<div class=\"p-3 bg-gray-100 rounded text-sm text-gray-600\">📷 Image: ${metadata.filename || 'attachment'}</div>`;\n                      }\n                    }}\n                  />\n                  {metadata.caption && (\n                    <p className=\"text-sm text-gray-600 mt-1 italic\">{metadata.caption}</p>\n                  )}\n                </div>\n              ) : metadata.mediaType?.startsWith('video/') ? (\n                <div className=\"rounded-lg overflow-hidden\">\n                  <video\n                    src={metadata.mediaUrl}\n                    controls\n                    className=\"max-w-full h-auto max-h-64 object-cover\"\n                    poster={metadata.thumbnailUrl}\n                    onError={(e) => {\n                      const target = e.target as HTMLVideoElement;\n                      target.style.display = 'none';\n                      const parent = target.parentElement;\n                      if (parent) {\n                        parent.innerHTML = `<div class=\"p-3 bg-gray-100 rounded text-sm text-gray-600\">🎥 Video: ${metadata.filename || 'attachment'}</div>`;\n                      }\n                    }}\n                  >\n                    Your browser does not support the video tag.\n                  </video>\n                  {metadata.caption && (\n                    <p className=\"text-sm text-gray-600 mt-1 italic\">{metadata.caption}</p>\n                  )}\n                </div>\n              ) : metadata.mediaType?.startsWith('audio/') ? (\n                <div className=\"p-3 bg-gray-100 rounded-lg\">\n                  <div className=\"flex items-center space-x-2 mb-2\">\n                    <span className=\"text-lg\">🎵</span>\n                    <span className=\"text-sm font-medium text-gray-700\">\n                      {metadata.filename || 'Audio message'}\n                    </span>\n                  </div>\n                  <audio\n                    src={metadata.mediaUrl}\n                    controls\n                    className=\"w-full\"\n                    onError={(e) => {\n                      const target = e.target as HTMLAudioElement;\n                      target.style.display = 'none';\n                      const parent = target.parentElement;\n                      if (parent) {\n                        const errorDiv = document.createElement('div');\n                        errorDiv.innerHTML = '<p class=\"text-xs text-red-500\">Audio playback not supported</p>';\n                        parent.appendChild(errorDiv);\n                      }\n                    }}\n                  >\n                    Your browser does not support the audio tag.\n                  </audio>\n                </div>\n              ) : (\n                <div className=\"p-3 bg-gray-100 rounded-lg border border-gray-200\">\n                  <div className=\"flex items-center space-x-2\">\n                    <span className=\"text-lg\">📎</span>\n                    <div className=\"flex-1\">\n                      <p className=\"text-sm font-medium text-gray-700\">\n                        {metadata.filename || 'Document'}\n                      </p>\n                      {metadata.attachment?.size && (\n                        <p className=\"text-xs text-gray-500\">{metadata.attachment.size}</p>\n                      )}\n                    </div>\n                    <a\n                      href={metadata.mediaUrl}\n                      target=\"_blank\"\n                      rel=\"noopener noreferrer\"\n                      className=\"text-xs bg-blue-500 text-white px-2 py-1 rounded hover:bg-blue-600 transition-colors\"\n                    >\n                      Download\n                    </a>\n                  </div>\n                </div>\n              )}\n            </div>\n          )}\n\n          {/* Fallback for attachment info without URL */}\n          {!metadata?.mediaUrl && metadata?.attachment && (\n            <div className=\"mt-2 p-3 bg-gray-100 rounded-lg border border-gray-200\">\n              <div className=\"flex items-center space-x-2\">\n                <span className=\"text-lg\">📎</span>\n                <div className=\"flex-1\">\n                  <p className=\"text-sm font-medium text-gray-700\">\n                    {metadata.attachment.name || 'Attachment'}\n                  </p>\n                  <p className=\"text-xs text-gray-500\">\n                    {metadata.attachment.type} {metadata.attachment.size && `• ${metadata.attachment.size}`}\n                  </p>\n                </div>\n              </div>\n            </div>\n          )}\n          {message.type === \"media\" && metadata && (\n            <div className=\"mt-2\">\n              {metadata.mediaType?.startsWith('image/') && (\n                <div className=\"relative\">\n                  {metadata.mediaUrl ? (\n                    <img\n                      src={metadata.mediaUrl}\n                      alt={metadata.filename || \"Image\"}\n                      className=\"max-w-full max-h-80 rounded-lg object-cover cursor-pointer hover:opacity-90 transition-opacity\"\n                      onClick={() => window.open(metadata.mediaUrl, '_blank')}\n                      loading=\"lazy\"\n                    />\n                  ) : (\n                    <div className=\"bg-gray-100 rounded-lg p-4 flex items-center justify-center min-h-[100px]\">\n                      <span className=\"text-gray-600\">🖼️ Image</span>\n                    </div>\n                  )}\n                  {metadata.filename && (\n                    <div className=\"text-xs text-gray-500 mt-1\">\n                      📎 {metadata.filename}\n                    </div>\n                  )}\n                </div>\n              )}\n              \n              {metadata.mediaType?.startsWith('video/') && (\n                <div className=\"relative\">\n                  {metadata.mediaUrl ? (\n                    <video\n                      src={metadata.mediaUrl}\n                      controls\n                      className=\"max-w-full max-h-80 rounded-lg\"\n                      poster={metadata.thumbnailUrl}\n                    >\n                      Your browser does not support the video tag.\n                    </video>\n                  ) : (\n                    <div className=\"bg-gray-100 rounded-lg p-4 flex items-center justify-center min-h-[100px]\">\n                      <span className=\"text-gray-600\">🎥 Video</span>\n                    </div>\n                  )}\n                  {metadata.filename && (\n                    <div className=\"text-xs text-gray-500 mt-1\">\n                      📎 {metadata.filename}\n                    </div>\n                  )}\n                </div>\n              )}\n              \n              {metadata.mediaType && !metadata.mediaType.startsWith('image/') && !metadata.mediaType.startsWith('video/') && (\n                <div className=\"bg-gray-50 rounded border p-3\">\n                  <div className=\"flex items-center\">\n                    <span className=\"text-gray-400 text-lg\">📄</span>\n                    <div className=\"ml-2\">\n                      <div className=\"text-sm font-medium text-gray-700\">\n                        {metadata.filename || \"Document\"}\n                      </div>\n                      <div className=\"text-xs text-gray-500\">\n                        {metadata.mediaType || \"Unknown type\"}\n                      </div>\n                      {metadata.mediaUrl && (\n                        <a\n                          href={metadata.mediaUrl}\n                          target=\"_blank\"\n                          rel=\"noopener noreferrer\"\n                          className=\"text-xs text-blue-500 hover:underline\"\n                        >\n                          Download\n                        </a>\n                      )}\n                    </div>\n                  </div>\n                </div>\n              )}\n              \n              {metadata.caption && (\n                <div className=\"text-sm text-gray-600 mt-2\">\n                  {metadata.caption}\n                </div>\n              )}\n            </div>\n          )}\n\n          {/* Template metadata */}\n          {message.type === \"template\" && metadata && (\n            <div className=\"mt-2\">\n              {metadata.variables && Object.keys(metadata.variables).length > 0 && (\n                <div className=\"text-xs text-gray-500 mt-1\">\n                  <span className=\"font-medium\">Variables:</span>\n                  {Object.entries(metadata.variables).map(([key, value]) => (\n                    <div key={key} className=\"ml-2\">\n                      {key}: {String(value)}\n                    </div>\n                  ))}\n                </div>\n              )}\n            </div>\n          )}\n\n          {/* Legacy attachment metadata */}\n          {metadata && metadata.attachment && (\n            <div className=\"mt-2 p-2 bg-gray-50 rounded border\">\n              <div className=\"text-sm font-medium text-gray-700\">\n                📋 {metadata.attachment.name || \"Attachment\"}\n              </div>\n              <div className=\"text-xs text-gray-500\">\n                {metadata.attachment.type || \"File\"} • {metadata.attachment.size || \"Unknown size\"}\n              </div>\n            </div>\n          )}\n          \n          <div className={cn(\n            \"flex items-center mt-1 space-x-1\",\n            isOutbound ? \"justify-end\" : \"justify-start\"\n          )}>\n            <span className=\"text-xs text-gray-500\">\n              {formatTime(message.timestamp || new Date())}\n            </span>\n            {isOutbound && getStatusIcon()}\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":12804},"client/src/components/contacts/contact-manager.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { Contact } from \"@shared/schema\";\n\nexport default function ContactManager() {\n  const [isCreateDialogOpen, setIsCreateDialogOpen] = useState(false);\n  const [editingContact, setEditingContact] = useState<Contact | null>(null);\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [filterGroup, setFilterGroup] = useState(\"all\");\n  const [formData, setFormData] = useState({\n    name: \"\",\n    phone: \"\",\n    email: \"\",\n    group: \"customer\",\n  });\n\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const { data: contacts = [], isLoading } = useQuery<Contact[]>({\n    queryKey: [\"/api/contacts\"],\n  });\n\n  const createMutation = useMutation({\n    mutationFn: async (data: any) => {\n      const response = await apiRequest(\"POST\", \"/api/contacts\", data);\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/contacts\"] });\n      setIsCreateDialogOpen(false);\n      resetForm();\n      toast({\n        title: \"Contact created\",\n        description: \"Your contact has been created successfully.\",\n      });\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Failed to create contact\",\n        description: error.message || \"There was an error creating your contact.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const updateMutation = useMutation({\n    mutationFn: async ({ id, data }: { id: string; data: any }) => {\n      const response = await apiRequest(\"PUT\", `/api/contacts/${id}`, data);\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/contacts\"] });\n      setEditingContact(null);\n      resetForm();\n      toast({\n        title: \"Contact updated\",\n        description: \"Your contact has been updated successfully.\",\n      });\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Failed to update contact\",\n        description: error.message || \"There was an error updating your contact.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const deleteMutation = useMutation({\n    mutationFn: async (id: string) => {\n      await apiRequest(\"DELETE\", `/api/contacts/${id}`);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/contacts\"] });\n      toast({\n        title: \"Contact deleted\",\n        description: \"Your contact has been deleted successfully.\",\n      });\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Failed to delete contact\",\n        description: error.message || \"There was an error deleting your contact.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const resetForm = () => {\n    setFormData({\n      name: \"\",\n      phone: \"\",\n      email: \"\",\n      group: \"customer\",\n    });\n  };\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    if (editingContact) {\n      updateMutation.mutate({ id: editingContact.id, data: formData });\n    } else {\n      createMutation.mutate(formData);\n    }\n  };\n\n  const handleEdit = (contact: Contact) => {\n    setEditingContact(contact);\n    setFormData({\n      name: contact.name,\n      phone: contact.phone,\n      email: contact.email || \"\",\n      group: contact.group || \"customer\",\n    });\n    setIsCreateDialogOpen(true);\n  };\n\n  const handleCloseDialog = () => {\n    setIsCreateDialogOpen(false);\n    setEditingContact(null);\n    resetForm();\n  };\n\n  // Filter contacts based on search and group\n  const filteredContacts = contacts.filter(contact => {\n    const matchesSearch = contact.name.toLowerCase().includes(searchTerm.toLowerCase()) ||\n                         contact.phone.includes(searchTerm);\n    const matchesGroup = filterGroup === \"all\" || (contact.group || \"customer\") === filterGroup;\n    return matchesSearch && matchesGroup;\n  });\n\n  const getGroupColor = (group: string) => {\n    const colors: Record<string, string> = {\n      customer: \"bg-blue-100 text-blue-800\",\n      prospect: \"bg-yellow-100 text-yellow-800\",\n      vip: \"bg-purple-100 text-purple-800\",\n      lead: \"bg-green-100 text-green-800\",\n    };\n    return colors[group] || \"bg-gray-100 text-gray-800\";\n  };\n\n  const getUniqueGroups = () => {\n    const groups = [...new Set(contacts.map(c => c.group || \"customer\"))];\n    return groups;\n  };\n\n  const formatLastContact = (date: Date | null) => {\n    if (!date) return \"Never\";\n    \n    const now = new Date();\n    const contactDate = new Date(date);\n    const diffMs = now.getTime() - contactDate.getTime();\n    const diffHours = diffMs / (1000 * 60 * 60);\n    const diffDays = diffMs / (1000 * 60 * 60 * 24);\n\n    if (diffHours < 1) {\n      return \"Just now\";\n    } else if (diffHours < 24) {\n      return \"Today\";\n    } else if (diffDays < 7) {\n      return `${Math.floor(diffDays)} days ago`;\n    } else {\n      return contactDate.toLocaleDateString();\n    }\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"flex items-center justify-center h-full\">\n        <div className=\"text-center\">\n          <div className=\"w-8 h-8 border-2 border-primary border-t-transparent rounded-full animate-spin mx-auto mb-2\"></div>\n          <p className=\"text-muted-foreground\">Loading contacts...</p>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"p-6 max-w-6xl mx-auto\">\n      <div className=\"flex items-center justify-between mb-6\">\n        <div>\n          <h2 className=\"text-2xl font-bold text-gray-800\">Contacts</h2>\n          <p className=\"text-gray-600 mt-1\">Manage your WhatsApp business contacts</p>\n        </div>\n        <div className=\"flex space-x-3\">\n          <Button variant=\"outline\" className=\"text-gray-600\">\n            <i className=\"fas fa-upload mr-2\" />\n            Import CSV\n          </Button>\n          <Dialog open={isCreateDialogOpen} onOpenChange={setIsCreateDialogOpen}>\n            <DialogTrigger asChild>\n              <Button className=\"whatsapp-green\" data-testid=\"button-new-contact\">\n                <i className=\"fas fa-plus mr-2\" />\n                Add Contact\n              </Button>\n            </DialogTrigger>\n            <DialogContent>\n              <DialogHeader>\n                <DialogTitle>{editingContact ? \"Edit Contact\" : \"Add New Contact\"}</DialogTitle>\n                <DialogDescription>\n                  {editingContact ? \"Update contact information below.\" : \"Enter the contact details below.\"}\n                </DialogDescription>\n              </DialogHeader>\n              <form onSubmit={handleSubmit} className=\"space-y-4\">\n                <div>\n                  <Label htmlFor=\"name\">Name</Label>\n                  <Input\n                    id=\"name\"\n                    value={formData.name}\n                    onChange={(e) => setFormData(prev => ({ ...prev, name: e.target.value }))}\n                    placeholder=\"Enter contact name\"\n                    required\n                    data-testid=\"input-contact-name\"\n                  />\n                </div>\n                <div>\n                  <Label htmlFor=\"phone\">Phone Number</Label>\n                  <Input\n                    id=\"phone\"\n                    value={formData.phone}\n                    onChange={(e) => setFormData(prev => ({ ...prev, phone: e.target.value }))}\n                    placeholder=\"+1234567890\"\n                    required\n                    data-testid=\"input-contact-phone\"\n                  />\n                </div>\n                <div>\n                  <Label htmlFor=\"email\">Email (Optional)</Label>\n                  <Input\n                    id=\"email\"\n                    type=\"email\"\n                    value={formData.email}\n                    onChange={(e) => setFormData(prev => ({ ...prev, email: e.target.value }))}\n                    placeholder=\"email@example.com\"\n                    data-testid=\"input-contact-email\"\n                  />\n                </div>\n                <div>\n                  <Label htmlFor=\"group\">Group</Label>\n                  <Select value={formData.group} onValueChange={(value) => setFormData(prev => ({ ...prev, group: value }))}>\n                    <SelectTrigger data-testid=\"select-contact-group\">\n                      <SelectValue placeholder=\"Select group\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"customer\">Customer</SelectItem>\n                      <SelectItem value=\"prospect\">Prospect</SelectItem>\n                      <SelectItem value=\"vip\">VIP</SelectItem>\n                      <SelectItem value=\"lead\">Lead</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n                <div className=\"flex justify-end space-x-2 pt-4\">\n                  <Button\n                    type=\"button\"\n                    variant=\"outline\"\n                    onClick={handleCloseDialog}\n                    data-testid=\"button-cancel-contact\"\n                  >\n                    Cancel\n                  </Button>\n                  <Button\n                    type=\"submit\"\n                    className=\"whatsapp-green\"\n                    disabled={createMutation.isPending || updateMutation.isPending}\n                    data-testid=\"button-save-contact\"\n                  >\n                    {(createMutation.isPending || updateMutation.isPending) ? \"Saving...\" : (editingContact ? \"Update\" : \"Add\")}\n                  </Button>\n                </div>\n              </form>\n            </DialogContent>\n          </Dialog>\n        </div>\n      </div>\n\n      {/* Search and Filters */}\n      <Card className=\"mb-6\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex items-center space-x-4\">\n            <div className=\"flex-1 relative\">\n              <Input\n                type=\"text\"\n                placeholder=\"Search contacts...\"\n                value={searchTerm}\n                onChange={(e) => setSearchTerm(e.target.value)}\n                className=\"pl-10\"\n                data-testid=\"input-search-contacts\"\n              />\n              <i className=\"fas fa-search absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400\" />\n            </div>\n            <Select value={filterGroup} onValueChange={setFilterGroup}>\n              <SelectTrigger className=\"w-48\" data-testid=\"select-filter-group\">\n                <SelectValue placeholder=\"All Groups\" />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"all\">All Groups</SelectItem>\n                {getUniqueGroups().map((group) => (\n                  <SelectItem key={group} value={group}>\n                    {group.charAt(0).toUpperCase() + group.slice(1)}\n                  </SelectItem>\n                ))}\n              </SelectContent>\n            </Select>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Contacts List */}\n      <Card>\n        <CardContent className=\"p-0\">\n          {filteredContacts.length === 0 ? (\n            <div className=\"text-center py-12\">\n              <i className=\"fas fa-address-book text-6xl text-gray-300 mb-4\" />\n              <h3 className=\"text-xl font-medium text-gray-500 mb-2\">\n                {contacts.length === 0 ? \"No contacts yet\" : \"No contacts match your search\"}\n              </h3>\n              <p className=\"text-gray-400 mb-4\">\n                {contacts.length === 0 ? \"Add your first contact to get started\" : \"Try adjusting your search or filters\"}\n              </p>\n              {contacts.length === 0 && (\n                <Button className=\"whatsapp-green\" onClick={() => setIsCreateDialogOpen(true)}>\n                  <i className=\"fas fa-plus mr-2\" />\n                  Add Contact\n                </Button>\n              )}\n            </div>\n          ) : (\n            <div className=\"divide-y divide-gray-200\">\n              {filteredContacts.map((contact) => (\n                <div\n                  key={contact.id}\n                  className=\"p-4 hover:bg-gray-50 transition-colors\"\n                  data-testid={`contact-row-${contact.id}`}\n                >\n                  <div className=\"flex items-center justify-between\">\n                    <div className=\"flex items-center space-x-4\">\n                      <img\n                        src={contact.profileImageUrl || \"https://images.unsplash.com/photo-1507003211169-0a1dd7228f2d?ixlib=rb-4.0.3&w=48&h=48&fit=crop&crop=face\"}\n                        alt={contact.name}\n                        className=\"w-12 h-12 rounded-full object-cover\"\n                      />\n                      <div>\n                        <h3 className=\"font-medium text-gray-900\">{contact.name}</h3>\n                        <p className=\"text-sm text-gray-600\">{contact.phone}</p>\n                        {contact.email && (\n                          <p className=\"text-sm text-gray-500\">{contact.email}</p>\n                        )}\n                        <div className=\"flex items-center space-x-2 mt-1\">\n                          <Badge className={getGroupColor(contact.group)}>\n                            {contact.group}\n                          </Badge>\n                          <span className=\"text-xs text-gray-500\">\n                            Last contact: {formatLastContact(contact.lastContact)}\n                          </span>\n                        </div>\n                      </div>\n                    </div>\n                    <div className=\"flex items-center space-x-2\">\n                      <Button\n                        className=\"whatsapp-green\"\n                        size=\"sm\"\n                        data-testid={`button-message-contact-${contact.id}`}\n                      >\n                        Message\n                      </Button>\n                      <Button\n                        variant=\"ghost\"\n                        size=\"icon\"\n                        onClick={() => handleEdit(contact)}\n                        data-testid={`button-edit-contact-${contact.id}`}\n                      >\n                        <i className=\"fas fa-edit text-gray-400 hover:text-gray-600\" />\n                      </Button>\n                      <Button\n                        variant=\"ghost\"\n                        size=\"icon\"\n                        onClick={() => deleteMutation.mutate(contact.id)}\n                        data-testid={`button-delete-contact-${contact.id}`}\n                      >\n                        <i className=\"fas fa-trash text-gray-400 hover:text-red-500\" />\n                      </Button>\n                    </div>\n                  </div>\n                </div>\n              ))}\n            </div>\n          )}\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":15444},"client/src/components/templates/template-manager.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { Template } from \"@shared/schema\";\n\nexport default function TemplateManager() {\n  const [isCreateDialogOpen, setIsCreateDialogOpen] = useState(false);\n  const [editingTemplate, setEditingTemplate] = useState<Template | null>(null);\n  const [formData, setFormData] = useState({\n    name: \"\",\n    category: \"general\",\n    content: \"\",\n  });\n\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const { data: templates = [], isLoading } = useQuery<Template[]>({\n    queryKey: [\"/api/templates\"],\n  });\n\n  const createMutation = useMutation({\n    mutationFn: async (data: any) => {\n      const response = await apiRequest(\"POST\", \"/api/templates\", data);\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/templates\"] });\n      setIsCreateDialogOpen(false);\n      resetForm();\n      toast({\n        title: \"Template created\",\n        description: \"Your template has been created successfully.\",\n      });\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Failed to create template\",\n        description: error.message || \"There was an error creating your template.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const updateMutation = useMutation({\n    mutationFn: async ({ id, data }: { id: string; data: any }) => {\n      const response = await apiRequest(\"PUT\", `/api/templates/${id}`, data);\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/templates\"] });\n      setEditingTemplate(null);\n      resetForm();\n      toast({\n        title: \"Template updated\",\n        description: \"Your template has been updated successfully.\",\n      });\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Failed to update template\",\n        description: error.message || \"There was an error updating your template.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const deleteMutation = useMutation({\n    mutationFn: async (id: string) => {\n      await apiRequest(\"DELETE\", `/api/templates/${id}`);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/templates\"] });\n      toast({\n        title: \"Template deleted\",\n        description: \"Your template has been deleted successfully.\",\n      });\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Failed to delete template\",\n        description: error.message || \"There was an error deleting your template.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const syncMutation = useMutation({\n    mutationFn: async () => {\n      const response = await apiRequest(\"POST\", \"/api/templates/sync\");\n      return response.json();\n    },\n    onSuccess: (data) => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/templates\"] });\n      toast({\n        title: \"Templates synced successfully\",\n        description: `${data.synced} templates synchronized from Facebook Business Manager`,\n      });\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Failed to sync templates\",\n        description: error.message || \"Check your WhatsApp configuration in Settings\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const resetForm = () => {\n    setFormData({\n      name: \"\",\n      category: \"general\",\n      content: \"\",\n    });\n  };\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    // Extract variables from content\n    const variables = formData.content.match(/\\{\\{([^}]+)\\}\\}/g)?.map(v => v.slice(2, -2)) || [];\n    \n    const templateData = {\n      ...formData,\n      variables,\n    };\n\n    if (editingTemplate) {\n      updateMutation.mutate({ id: editingTemplate.id, data: templateData });\n    } else {\n      createMutation.mutate(templateData);\n    }\n  };\n\n  const handleEdit = (template: Template) => {\n    setEditingTemplate(template);\n    setFormData({\n      name: template.name,\n      category: template.category || \"general\",\n      content: template.content,\n    });\n    setIsCreateDialogOpen(true);\n  };\n\n  const handleCloseDialog = () => {\n    setIsCreateDialogOpen(false);\n    setEditingTemplate(null);\n    resetForm();\n  };\n\n  const getCategoryColor = (category: string) => {\n    const colors: Record<string, string> = {\n      greeting: \"bg-blue-100 text-blue-800\",\n      marketing: \"bg-green-100 text-green-800\",\n      transactional: \"bg-purple-100 text-purple-800\",\n      general: \"bg-gray-100 text-gray-800\",\n    };\n    return colors[category] || colors.general;\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"flex items-center justify-center h-full\">\n        <div className=\"text-center\">\n          <div className=\"w-8 h-8 border-2 border-primary border-t-transparent rounded-full animate-spin mx-auto mb-2\"></div>\n          <p className=\"text-muted-foreground\">Loading templates...</p>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"p-6 max-w-6xl mx-auto\">\n      <div className=\"flex items-center justify-between mb-6\">\n        <div>\n          <h2 className=\"text-2xl font-bold text-gray-800\">Message Templates</h2>\n          <p className=\"text-gray-600 mt-1\">Create and manage your WhatsApp message templates</p>\n        </div>\n        <div className=\"flex gap-2\">\n          <Button \n            variant=\"outline\" \n            onClick={() => syncMutation.mutate()}\n            disabled={syncMutation.isPending}\n            data-testid=\"button-sync-templates\"\n          >\n            <i className=\"fas fa-sync-alt mr-2\" />\n            {syncMutation.isPending ? \"Syncing...\" : \"Sync from Facebook\"}\n          </Button>\n          <Dialog open={isCreateDialogOpen} onOpenChange={setIsCreateDialogOpen}>\n            <DialogTrigger asChild>\n              <Button className=\"whatsapp-green\" data-testid=\"button-new-template\">\n                <i className=\"fas fa-plus mr-2\" />\n                New Template\n              </Button>\n            </DialogTrigger>\n          <DialogContent className=\"max-w-2xl\">\n            <DialogHeader>\n              <DialogTitle>{editingTemplate ? \"Edit Template\" : \"Create New Template\"}</DialogTitle>\n              <DialogDescription>\n                {editingTemplate ? \"Update your template details below.\" : \"Create a new message template with variables.\"}\n              </DialogDescription>\n            </DialogHeader>\n            <form onSubmit={handleSubmit} className=\"space-y-4\">\n              <div className=\"grid grid-cols-2 gap-4\">\n                <div>\n                  <Label htmlFor=\"name\">Template Name</Label>\n                  <Input\n                    id=\"name\"\n                    value={formData.name}\n                    onChange={(e) => setFormData(prev => ({ ...prev, name: e.target.value }))}\n                    placeholder=\"Enter template name\"\n                    required\n                    data-testid=\"input-template-name\"\n                  />\n                </div>\n                <div>\n                  <Label htmlFor=\"category\">Category</Label>\n                  <Select value={formData.category} onValueChange={(value) => setFormData(prev => ({ ...prev, category: value }))}>\n                    <SelectTrigger data-testid=\"select-template-category\">\n                      <SelectValue placeholder=\"Select category\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"general\">General</SelectItem>\n                      <SelectItem value=\"greeting\">Greeting</SelectItem>\n                      <SelectItem value=\"marketing\">Marketing</SelectItem>\n                      <SelectItem value=\"transactional\">Transactional</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n              </div>\n              <div>\n                <Label htmlFor=\"content\">Template Content</Label>\n                <Textarea\n                  id=\"content\"\n                  value={formData.content}\n                  onChange={(e) => setFormData(prev => ({ ...prev, content: e.target.value }))}\n                  placeholder=\"Enter your template content. Use {{variable_name}} for variables.\"\n                  rows={6}\n                  required\n                  data-testid=\"textarea-template-content\"\n                />\n                <p className=\"text-sm text-gray-500 mt-1\">\n                  Use double curly braces for variables, e.g., {\"{{customer_name}}\"} or {\"{{product_name}}\"}\n                </p>\n              </div>\n              <div className=\"flex justify-end space-x-2 pt-4\">\n                <Button\n                  type=\"button\"\n                  variant=\"outline\"\n                  onClick={handleCloseDialog}\n                  data-testid=\"button-cancel-template\"\n                >\n                  Cancel\n                </Button>\n                <Button\n                  type=\"submit\"\n                  className=\"whatsapp-green\"\n                  disabled={createMutation.isPending || updateMutation.isPending}\n                  data-testid=\"button-save-template\"\n                >\n                  {(createMutation.isPending || updateMutation.isPending) ? \"Saving...\" : (editingTemplate ? \"Update\" : \"Create\")}\n                </Button>\n              </div>\n            </form>\n          </DialogContent>\n          </Dialog>\n        </div>\n      </div>\n\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n        {templates.length === 0 ? (\n          <div className=\"col-span-full text-center py-12\">\n            <i className=\"fas fa-file-alt text-6xl text-gray-300 mb-4\" />\n            <h3 className=\"text-xl font-medium text-gray-500 mb-2\">No templates yet</h3>\n            <p className=\"text-gray-400 mb-4\">Create your first message template to get started</p>\n            <Button className=\"whatsapp-green\" onClick={() => setIsCreateDialogOpen(true)}>\n              <i className=\"fas fa-plus mr-2\" />\n              Create Template\n            </Button>\n          </div>\n        ) : (\n          templates.map((template) => (\n            <Card key={template.id} className=\"hover:shadow-md transition-shadow\" data-testid={`template-card-${template.id}`}>\n              <CardHeader className=\"pb-3\">\n                <div className=\"flex items-center justify-between\">\n                  <CardTitle className=\"text-lg\">{template.name}</CardTitle>\n                  <div className=\"flex space-x-2\">\n                    <Button\n                      variant=\"ghost\"\n                      size=\"icon\"\n                      onClick={() => handleEdit(template)}\n                      data-testid={`button-edit-template-${template.id}`}\n                    >\n                      <i className=\"fas fa-edit text-gray-400 hover:text-gray-600\" />\n                    </Button>\n                    <Button\n                      variant=\"ghost\"\n                      size=\"icon\"\n                      onClick={() => deleteMutation.mutate(template.id)}\n                      data-testid={`button-delete-template-${template.id}`}\n                    >\n                      <i className=\"fas fa-trash text-gray-400 hover:text-red-500\" />\n                    </Button>\n                  </div>\n                </div>\n                <Badge className={getCategoryColor(template.category || \"general\")}>\n                  {template.category || \"general\"}\n                </Badge>\n              </CardHeader>\n              <CardContent>\n                <div className=\"bg-gray-50 p-3 rounded text-sm text-gray-700 mb-4 min-h-[80px]\">\n                  {template.content}\n                </div>\n                {template.variables && Array.isArray(template.variables) && template.variables.length > 0 && (\n                  <div className=\"mb-4\">\n                    <p className=\"text-xs text-gray-500 mb-2\">Variables:</p>\n                    <div className=\"flex flex-wrap gap-1\">\n                      {template.variables.map((variable, index) => (\n                        <Badge key={index} variant=\"outline\" className=\"text-xs\">\n                          {variable}\n                        </Badge>\n                      ))}\n                    </div>\n                  </div>\n                )}\n                <div className=\"flex space-x-2\">\n                  <Button className=\"flex-1 whatsapp-green text-sm\" data-testid={`button-use-template-${template.id}`}>\n                    Use Template\n                  </Button>\n                  <Button variant=\"outline\" className=\"px-3 text-sm\">\n                    Preview\n                  </Button>\n                </div>\n              </CardContent>\n            </Card>\n          ))\n        )}\n      </div>\n    </div>\n  );\n}\n","size_bytes":13487},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5742},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar-nav.tsx":{"content":"import { useLogout } from \"@/hooks/use-auth\";\nimport { Button } from \"@/components/ui/button\";\nimport { cn } from \"@/lib/utils\";\n\ninterface SidebarNavProps {\n  activeTab: string;\n  onTabChange: (tab: string) => void;\n}\n\nconst navItems = [\n  { id: \"chats\", icon: \"fas fa-comments\", label: \"Chats\" },\n  { id: \"templates\", icon: \"fas fa-file-alt\", label: \"Templates\" },\n  { id: \"broadcast\", icon: \"fas fa-bullhorn\", label: \"Broadcast\" },\n  { id: \"contacts\", icon: \"fas fa-address-book\", label: \"Contacts\" },\n  { id: \"settings\", icon: \"fas fa-cog\", label: \"Settings\" },\n];\n\nexport default function SidebarNav({ activeTab, onTabChange }: SidebarNavProps) {\n  const logoutMutation = useLogout();\n\n  return (\n    <div className=\"w-16 bg-whatsapp-dark flex flex-col items-center py-4 space-y-6\">\n      {navItems.map((item) => (\n        <Button\n          key={item.id}\n          variant=\"ghost\"\n          size=\"icon\"\n          className={cn(\n            \"p-3 rounded-lg transition-colors\",\n            activeTab === item.id\n              ? \"bg-whatsapp text-white\"\n              : \"text-white/70 hover:bg-whatsapp-dark/50 hover:text-white\"\n          )}\n          onClick={() => onTabChange(item.id)}\n          data-testid={`nav-${item.id}`}\n          title={item.label}\n        >\n          <i className={`${item.icon} text-xl`} />\n        </Button>\n      ))}\n      \n      <div className=\"flex-1\" />\n      \n      <Button\n        variant=\"ghost\"\n        size=\"icon\"\n        className=\"p-3 rounded-lg text-white/70 hover:bg-red-600 hover:text-white transition-colors\"\n        onClick={() => logoutMutation.mutate()}\n        data-testid=\"button-logout\"\n        title=\"Logout\"\n      >\n        <i className=\"fas fa-sign-out-alt text-xl\" />\n      </Button>\n    </div>\n  );\n}\n","size_bytes":1759},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209},"client/src/components/chat/template-variable-dialog.tsx":{"content":"import { useState } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Dialog, DialogContent, DialogDescription, DialogFooter, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Template } from \"@shared/schema\";\n\ninterface TemplateVariableDialogProps {\n  template: Template | null;\n  isOpen: boolean;\n  onClose: () => void;\n  onSend: (variables: Record<string, string>) => void;\n  isSending: boolean;\n}\n\nexport default function TemplateVariableDialog({ \n  template, \n  isOpen, \n  onClose, \n  onSend, \n  isSending \n}: TemplateVariableDialogProps) {\n  const [variables, setVariables] = useState<Record<string, string>>({});\n\n  const templateVariables = template?.variables && Array.isArray(template.variables) \n    ? template.variables as string[] \n    : [];\n\n  const handleVariableChange = (variableName: string, value: string) => {\n    setVariables(prev => ({\n      ...prev,\n      [variableName]: value\n    }));\n  };\n\n  const handleSend = () => {\n    onSend(variables);\n    setVariables({}); // Reset variables\n  };\n\n  const handleClose = () => {\n    setVariables({}); // Reset variables\n    onClose();\n  };\n\n  if (!template) return null;\n\n  return (\n    <Dialog open={isOpen} onOpenChange={handleClose}>\n      <DialogContent className=\"sm:max-w-[425px]\" data-testid=\"dialog-template-variables\">\n        <DialogHeader>\n          <DialogTitle>Template Variables</DialogTitle>\n          <DialogDescription>\n            Please fill in the variables for the template \"{template.name}\"\n          </DialogDescription>\n        </DialogHeader>\n        \n        <div className=\"grid gap-4 py-4\">\n          {templateVariables.map((variableName, index) => (\n            <div key={index} className=\"grid grid-cols-4 items-center gap-4\">\n              <Label htmlFor={`var-${index}`} className=\"text-right\">\n                {variableName}\n              </Label>\n              <Input\n                id={`var-${index}`}\n                value={variables[variableName] || \"\"}\n                onChange={(e) => handleVariableChange(variableName, e.target.value)}\n                className=\"col-span-3\"\n                placeholder={`Enter ${variableName}...`}\n                data-testid={`input-variable-${variableName}`}\n              />\n            </div>\n          ))}\n        </div>\n        \n        <DialogFooter>\n          <Button \n            variant=\"outline\" \n            onClick={handleClose}\n            disabled={isSending}\n            data-testid=\"button-cancel-template\"\n          >\n            Cancel\n          </Button>\n          <Button \n            onClick={handleSend}\n            disabled={isSending}\n            data-testid=\"button-send-template\"\n          >\n            {isSending ? \"Sending...\" : \"Send Template\"}\n          </Button>\n        </DialogFooter>\n      </DialogContent>\n    </Dialog>\n  );\n}","size_bytes":2938},"scripts/setup-admin.js":{"content":"import { Pool, neonConfig } from '@neondatabase/serverless';\nimport { drizzle } from 'drizzle-orm/neon-serverless';\nimport { eq } from 'drizzle-orm';\nimport ws from \"ws\";\nimport bcrypt from 'bcrypt';\nimport { users } from '../shared/schema.js';\n\nneonConfig.webSocketConstructor = ws;\n\nconst DATABASE_URL = process.env.DATABASE_URL || \"postgresql://neondb_owner:npg_1IpD2XOutJMC@ep-empty-queen-ae788c7b-pooler.c-2.us-east-2.aws.neon.tech/neondb?sslmode=require&channel_binding=require\";\n\nasync function setupAdminUser() {\n  try {\n    const pool = new Pool({ connectionString: DATABASE_URL });\n    const db = drizzle({ client: pool, schema: { users } });\n\n    // Check if admin user already exists\n    const existingAdmin = await db.select().from(users).where(eq(users.username, 'admin')).limit(1);\n    \n    if (existingAdmin.length > 0) {\n      console.log('✅ Admin user already exists');\n      return;\n    }\n\n    // Hash the password\n    const hashedPassword = await bcrypt.hash('admin123', 10);\n\n    // Create the admin user\n    const [newUser] = await db.insert(users).values({\n      username: 'admin',\n      password: hashedPassword,\n    }).returning();\n\n    console.log('✅ Admin user created successfully:', {\n      id: newUser.id,\n      username: newUser.username,\n      createdAt: newUser.createdAt\n    });\n\n    await pool.end();\n  } catch (error) {\n    console.error('❌ Error setting up admin user:', error);\n    process.exit(1);\n  }\n}\n\nsetupAdminUser();","size_bytes":1467}}}